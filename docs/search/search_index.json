{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NGSPipeDb: NGS Pipelines & Databases NGSPipeDb is an automated pipeline for parallel processing of huge next generation sequencing (NGS) data and database generation using snakemake workflow which allows for ease of use, optimal speed, and a highly modular code that can be further added onto and customized by experienced users. Overview of NGSPipeDb Quick start Required Although included in this section are step-by-step instructions, it is assumed that the user has a basic understanding of the nix command line interface . Also, it would be better if the user has basic knowledge about snakemake , conda and best practice RNA sequence analysis , but it is not required. You can also find some easy-to-learn matierals in our \"Learning materials\" page, for example linux & shell and RNASeq background for beginers. Install wget and git To get some of the required software packages, we will use the command line tools called wget and git . wget is a popular tool for downloading things off of the internet. git is a distributed version control system which we will use to checkout the NGSPipeDb code. Note These tools are already pre-installed in most systems, but if you are unsure whether or not you have wget enter wget and if the return is wget: command not found , then you will have to install wget . Do likewise for git . Install Miniconda3 NGSPipeDb relies on the conda package manager for installation and dependency resolution, so you will need to install conda first. We will be using the Miniconda3 package management system (aka CONDA) to manage all of the software packages that NGSPipe is dependent on. Use following commands to retrieve and then run the Minicoda3 installation script: 1.download miniconda3 Linux & WSL wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh MacOSX wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh 2.install miniconda3 Linux & WSL bash Miniconda3-latest-Linux-x86_64.sh MacOSX bash Miniconda3-latest-MacOSX-x86_64.sh Important While running the installation script, follow the commands listed on screen, and press the enter key to scroll. Make sure to answer yes when asked if you want to prepend Miniconda3 to PATH. After that, close your terminal, open a new one and you should now have Conda working! You could, alternatively, run source ~/.bashrc to initiate conda. 3.Test if conda is ready to work by entering: conda update conda . Press y to confirm the conda updates. 4.Finally, conda install mamba -c conda-forge . Note Mamba is a reimplementation of the conda package manager in C++, the fast conda-alternative. Mamba is recommended but not necessary. Info You will only have to install Minicoda3 once. If you face any conda problem, please learn more about it. Installation Install from pipi conda install pip pip3 install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple ngspipedb Install from conda conda install Command line interface ngspipedb -h Usage : ngspipedb [OPTIONS] COMMAND [ARGS]... ngspipedb is a snakemake-based tool for reproducible next generation sequencing (NGS) data analysis and interactive web application auto-build. Example : ngspipedb env create -n ngspipe-rnaseq-basic ngspipedb download -n ngspipe-rnaseq-basic -t testdata ngspipedb startproject myprojectname -n ngspipe-rnaseq-basic ngspipedb runpipe myprojectname ngspipe-rnaseq-basic --report -db ngspipedb rundb serve test_pipeline/ngspipe-rnaseq-basic/result_Sep-06-2021/ngsdb_code/manage.py -up 0.0.0.0:8000 A more detailed tutorial of how to use this toolkit can be found here : https://xuanblo.github.io/NGSPipeDb/ Options : --version Show the version and exit. -h, --help Show this message and exit. Commands : download data retrive related commands env ngspipedb environment related commands rundb generate a database related commands runpipe run ngspipe startproject Creates a ngspipedb project directory structure for the given project name in the current directory or optionally in the given directory. Usage example run RNA-Seq analysis, generate report, and build RNA-Seq database step1. download test data: ngspipedb download -n ngspipe-rnaseq-basic -t testdata && tar -zxvf testdata-ngspipe-rnaseq-basic.tar.gz step2. run rnaseq analysis on test data: ngspipedb runpipe mouse_rnaseq_analysis -n ngspipe-rnaseq-basic --genomeFasta testdata-ngspipe-rnaseq-basic/genome/chr19.fa --genomeAnno testdata-ngspipe-rnaseq-basic/genome/GRCm38.83.chr19.gtf --samplefile testdata-ngspipe-rnaseq-basic/rawdata/sample.csv --conditionfile testdata-ngspipe-rnaseq-basic/rawdata/condition.csv --rawreadsdir testdata-ngspipe-rnaseq-basic/rawdata -j 10 --report -db step3. start ngsdb server: ngspipedb rundb serve -m mouse_rnaseq_analysis/result/ngsdb_code/manage.py -up 127 .0.0.1:8000","title":"Home"},{"location":"#ngspipedb-ngs-pipelines-databases","text":"NGSPipeDb is an automated pipeline for parallel processing of huge next generation sequencing (NGS) data and database generation using snakemake workflow which allows for ease of use, optimal speed, and a highly modular code that can be further added onto and customized by experienced users. Overview of NGSPipeDb","title":"NGSPipeDb: NGS Pipelines &amp; Databases"},{"location":"#quick-start","text":"","title":"Quick start"},{"location":"#required","text":"Although included in this section are step-by-step instructions, it is assumed that the user has a basic understanding of the nix command line interface . Also, it would be better if the user has basic knowledge about snakemake , conda and best practice RNA sequence analysis , but it is not required. You can also find some easy-to-learn matierals in our \"Learning materials\" page, for example linux & shell and RNASeq background for beginers. Install wget and git To get some of the required software packages, we will use the command line tools called wget and git . wget is a popular tool for downloading things off of the internet. git is a distributed version control system which we will use to checkout the NGSPipeDb code. Note These tools are already pre-installed in most systems, but if you are unsure whether or not you have wget enter wget and if the return is wget: command not found , then you will have to install wget . Do likewise for git . Install Miniconda3 NGSPipeDb relies on the conda package manager for installation and dependency resolution, so you will need to install conda first. We will be using the Miniconda3 package management system (aka CONDA) to manage all of the software packages that NGSPipe is dependent on. Use following commands to retrieve and then run the Minicoda3 installation script: 1.download miniconda3 Linux & WSL wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh MacOSX wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh 2.install miniconda3 Linux & WSL bash Miniconda3-latest-Linux-x86_64.sh MacOSX bash Miniconda3-latest-MacOSX-x86_64.sh Important While running the installation script, follow the commands listed on screen, and press the enter key to scroll. Make sure to answer yes when asked if you want to prepend Miniconda3 to PATH. After that, close your terminal, open a new one and you should now have Conda working! You could, alternatively, run source ~/.bashrc to initiate conda. 3.Test if conda is ready to work by entering: conda update conda . Press y to confirm the conda updates. 4.Finally, conda install mamba -c conda-forge . Note Mamba is a reimplementation of the conda package manager in C++, the fast conda-alternative. Mamba is recommended but not necessary. Info You will only have to install Minicoda3 once. If you face any conda problem, please learn more about it.","title":"Required"},{"location":"#installation","text":"Install from pipi conda install pip pip3 install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple ngspipedb Install from conda conda install","title":"Installation"},{"location":"#command-line-interface","text":"ngspipedb -h Usage : ngspipedb [OPTIONS] COMMAND [ARGS]... ngspipedb is a snakemake-based tool for reproducible next generation sequencing (NGS) data analysis and interactive web application auto-build. Example : ngspipedb env create -n ngspipe-rnaseq-basic ngspipedb download -n ngspipe-rnaseq-basic -t testdata ngspipedb startproject myprojectname -n ngspipe-rnaseq-basic ngspipedb runpipe myprojectname ngspipe-rnaseq-basic --report -db ngspipedb rundb serve test_pipeline/ngspipe-rnaseq-basic/result_Sep-06-2021/ngsdb_code/manage.py -up 0.0.0.0:8000 A more detailed tutorial of how to use this toolkit can be found here : https://xuanblo.github.io/NGSPipeDb/ Options : --version Show the version and exit. -h, --help Show this message and exit. Commands : download data retrive related commands env ngspipedb environment related commands rundb generate a database related commands runpipe run ngspipe startproject Creates a ngspipedb project directory structure for the given project name in the current directory or optionally in the given directory.","title":"Command line interface"},{"location":"#usage-example","text":"run RNA-Seq analysis, generate report, and build RNA-Seq database step1. download test data: ngspipedb download -n ngspipe-rnaseq-basic -t testdata && tar -zxvf testdata-ngspipe-rnaseq-basic.tar.gz step2. run rnaseq analysis on test data: ngspipedb runpipe mouse_rnaseq_analysis -n ngspipe-rnaseq-basic --genomeFasta testdata-ngspipe-rnaseq-basic/genome/chr19.fa --genomeAnno testdata-ngspipe-rnaseq-basic/genome/GRCm38.83.chr19.gtf --samplefile testdata-ngspipe-rnaseq-basic/rawdata/sample.csv --conditionfile testdata-ngspipe-rnaseq-basic/rawdata/condition.csv --rawreadsdir testdata-ngspipe-rnaseq-basic/rawdata -j 10 --report -db step3. start ngsdb server: ngspipedb rundb serve -m mouse_rnaseq_analysis/result/ngsdb_code/manage.py -up 127 .0.0.1:8000","title":"Usage example"},{"location":"NGSDb/","text":"NGSDb one step to view the NGSPipe RNA-Seq analysis results in a browser bash ngspipe/scripts/one_step_view_database.sh test Now you can viste your website on http://127.0.0.1:8000. All result are stored in results . - Example of report . - Example of database . Step-by-step to generate database with test data","title":"NGSDb"},{"location":"NGSDb/#ngsdb","text":"","title":"NGSDb"},{"location":"NGSDb/#one-step-to-view-the-ngspipe-rna-seq-analysis-results-in-a-browser","text":"bash ngspipe/scripts/one_step_view_database.sh test Now you can viste your website on http://127.0.0.1:8000. All result are stored in results . - Example of report . - Example of database .","title":"one step to view the NGSPipe RNA-Seq analysis results in a browser"},{"location":"NGSDb/#step-by-step-to-generate-database-with-test-data","text":"","title":"Step-by-step to generate database with test data "},{"location":"NGSPipe-ChIP-seq/","text":"chip-seq analysis A typical flow of transcriptome analysis with reference is shown in the figure below ChiP-Seq pipeline","title":"ChIP-seq"},{"location":"NGSPipe-ChIP-seq/#chip-seq-analysis","text":"A typical flow of transcriptome analysis with reference is shown in the figure below ChiP-Seq pipeline","title":"chip-seq analysis"},{"location":"NGSPipe-medicago-tnt1/","text":"Medicago tnt1 insertion ITIS: tool to Identify TE Insertion Sites in genome https://github.com/Chuan-Jiang/ITIS https://pubmed.ncbi.nlm.nih.gov/25887332/ Example: python -m ngspipedbcli runpipe ngspipe-tnt-medicago -n ngspipe-tnt --resultdirname result -d ../ --genomeFasta ../genome/scf003.fa --genomeAnno ../genome/scf003.sorted.gff --samplefile ../rawdata/sample.csv --rawreadsdir ../rawdata --snaketype p --reads_prefix _R{}_paired.fastq.gz -j 20 ngspipe-tnt-medicago your project name -n ngspipe-tnt pipeline name --genomeFasta ../genome/scf003.fa give a genome fasta file path, see file format fasta --genomeAnno ../genome/scf003.sorted.gff give a genome annotaion file path gtf / gff --samplefile ../rawdata/sample.csv give a sample file path, which has one column samplefile: XTD-6 configfile: #--------------------------- # medicago tnt1 #--------------------------- ## 1.reference ## genomeAnno_path : /home/zhangxuan/Work/Project/hehua/test_ngspipedb/genome/scf003.sorted.gff # gene annotation file, can be gtf or gff format genomeFasta_path : /home/zhangxuan/Work/Project/hehua/test_ngspipedb/genome/scf003.fa # genome sequence, fasta format ## 2.raw reads data ## sample_path : /home/zhangxuan/Work/Project/hehua/test_ngspipedb/rawdata/sample.csv # sample file rawreads_dir : /home/zhangxuan/Work/Project/hehua/test_ngspipedb/rawdata # sample file directory read1Suffix : _R1_paired.fastq.gz # fastq suffix, read1 read2Suffix : _R2_paired.fastq.gz ## 3.output directory ## results_name : result ## 4.notice ## # if the string is 'nobody', ngspipe will not send email # modify 'noboby' to 'xxx@qq.com' or 'xxx@qq.com,yyy@qq.com' to send email email_addr : nobody # choose where to stop your pipeline target : all # #---------------------------------- # Configuration for sampling data #---------------------------------- # for test the pipe, you can choose to the part of the input file # which sampling method do you want to use? sampling_method : links # links or head or tail or seqkit_number or seqkit_proportion # Default is links (ues the whole data of sample); head (use first sampling_range line in every sample),tail (use last sampling_range line in every sample); seqkit_number (number of reads); seqkit_proportion (percentage of reads) # and how many reads file line or reads number or reads proportion do you want to use? sampling_value : 80000 # for head and tail, this value is line number; for number, this value is reads number; for proportion, this value is percentage samples_num : all # all or interger # Default is all (use all samples), give a sample number, must less than real sample number, for example 6 #---------------------------------- # Configuration for Quality Control #---------------------------------- # which qc method do you want to use? qc_method : trim-galore # trim-galore or trimmomatic or fastqc","title":"medicago tnt insertion"},{"location":"NGSPipe-medicago-tnt1/#medicago-tnt1-insertion","text":"ITIS: tool to Identify TE Insertion Sites in genome https://github.com/Chuan-Jiang/ITIS https://pubmed.ncbi.nlm.nih.gov/25887332/ Example: python -m ngspipedbcli runpipe ngspipe-tnt-medicago -n ngspipe-tnt --resultdirname result -d ../ --genomeFasta ../genome/scf003.fa --genomeAnno ../genome/scf003.sorted.gff --samplefile ../rawdata/sample.csv --rawreadsdir ../rawdata --snaketype p --reads_prefix _R{}_paired.fastq.gz -j 20 ngspipe-tnt-medicago your project name -n ngspipe-tnt pipeline name --genomeFasta ../genome/scf003.fa give a genome fasta file path, see file format fasta --genomeAnno ../genome/scf003.sorted.gff give a genome annotaion file path gtf / gff --samplefile ../rawdata/sample.csv give a sample file path, which has one column samplefile: XTD-6 configfile: #--------------------------- # medicago tnt1 #--------------------------- ## 1.reference ## genomeAnno_path : /home/zhangxuan/Work/Project/hehua/test_ngspipedb/genome/scf003.sorted.gff # gene annotation file, can be gtf or gff format genomeFasta_path : /home/zhangxuan/Work/Project/hehua/test_ngspipedb/genome/scf003.fa # genome sequence, fasta format ## 2.raw reads data ## sample_path : /home/zhangxuan/Work/Project/hehua/test_ngspipedb/rawdata/sample.csv # sample file rawreads_dir : /home/zhangxuan/Work/Project/hehua/test_ngspipedb/rawdata # sample file directory read1Suffix : _R1_paired.fastq.gz # fastq suffix, read1 read2Suffix : _R2_paired.fastq.gz ## 3.output directory ## results_name : result ## 4.notice ## # if the string is 'nobody', ngspipe will not send email # modify 'noboby' to 'xxx@qq.com' or 'xxx@qq.com,yyy@qq.com' to send email email_addr : nobody # choose where to stop your pipeline target : all # #---------------------------------- # Configuration for sampling data #---------------------------------- # for test the pipe, you can choose to the part of the input file # which sampling method do you want to use? sampling_method : links # links or head or tail or seqkit_number or seqkit_proportion # Default is links (ues the whole data of sample); head (use first sampling_range line in every sample),tail (use last sampling_range line in every sample); seqkit_number (number of reads); seqkit_proportion (percentage of reads) # and how many reads file line or reads number or reads proportion do you want to use? sampling_value : 80000 # for head and tail, this value is line number; for number, this value is reads number; for proportion, this value is percentage samples_num : all # all or interger # Default is all (use all samples), give a sample number, must less than real sample number, for example 6 #---------------------------------- # Configuration for Quality Control #---------------------------------- # which qc method do you want to use? qc_method : trim-galore # trim-galore or trimmomatic or fastqc","title":"Medicago tnt1 insertion"},{"location":"NGSPipe-resequecing/","text":"resequcing analysis A typical flow of transcriptome analysis with reference is shown in the figure below resequencing pipeline","title":"resequecing"},{"location":"NGSPipe-resequecing/#resequcing-analysis","text":"A typical flow of transcriptome analysis with reference is shown in the figure below resequencing pipeline","title":"resequcing analysis"},{"location":"NGSPipeDb/","text":"NGSPipeDb - NGS pipeline and database Author: Dr. Xuan Zhang Last update: 2021-01-20 Citation: NGSPipeDb: An automated pipeline for parallel processing of huge NGS data and database generation. Table of Contents: Introduction to NGSPipeDb System requirements Anatomy of a NGSPipeDb project Basics: An example execution of RNA-seq analysis with test data Advance: An example execution of RNA-seq analysis with custome data Reproducibility Troubleshooting Introduction to NGSPipeDb NGSPipeDb is an automated pipeline for parallel processing of huge next generation sequencing (NGS) data and database generation using snakemake workflow which allows for ease of use, optimal speed, and a highly modular code that can be further added onto and customized by experienced users. It can be further divided into NGSPipe and NGSDb for individual usage. NGSPipe consists of a Snakefile ( ngspipe/rnaseq.snakefile.py , it includes some basic rules ngspipe/rule/*.snakefile.py ), conda environment files ( ngspipe/envs/*.yaml ), a configuration file ( ngspipe/config/rnaseq.config.yaml ), a set of python , R , Shell and Perl scripts ( ngspipe/scripts/*.py ), and a set of reStructuretext reports ( reports/*.rst ). It combines the use of several dozen omic-seq tools, suites, and packages to create a complete pipeline that takes RNA-seq analysis , resequcing analysis etc. from raw sequencing data all the way through alignment, quality control, unsupervised analyses, differential expression, and downstream pathway analysis. It is implemented such that alternative or similar analysis can be added or removed. The results are compiled in a simple and highly visual report containing the key figures to explain the analysis, and then compiles all of the relevant files, tables, and pictures into an easy to navigate folder. Table file such as csv, tsv, xlsx etc. It is based on snakemake and includes the following tools: * shovill (based on Spades) * QUAST v.5 (including BUSCO) * mash * fastp It will read untrimmed raw data from your illumina sequencing experiments as paired .fastq.gz-files. These are then trimmed, assembled and polished. Besides generating ready-for-use contigs, AQUAMIS will select the closest reference genome from NCBI RefSeq and produce an intuitive, detailed report on your data and assemblies to evaluate its reliability for further analyses. It relies on reference-based and reference-free measures such as coverage depth, gene content, genome completeness and contamination, assembly length and many more. Based on the experience from thousands of sequencing experiments, threshold sets for different species have been defined to detect potentially poor results. In addition, NGSDb has been outfitted with several recently published tools that allow for visualize and data share.can be convert to Sqlite3 format. The Django project and apps can be orgined by user defined. It is easy to share your data with a web inteface. a set of apps (such as home , igv , geneExpAtlas , efp brwose ). By default, the NGSPipeDb performs all the steps shown in the diagram below. However, advanced user, you can easily modify the Snakefile and the config.yaml and/or add \"custom rules\" to enable additional functions. Currently, transcript quantification with Salmon at the read-level or gene quantification by featureCounts can be activated. The first version handles RNA-Seq workflow. Workflows available: - RNA-seq - ChIP-seq - Resequencing TODO : NGSPipe miRNA scRNA-seq ATAC-seq NGSdb efp browser System requirements Building NGSPipeDb and running the examples require Linux, MacOS or Windows Subsystem for Linux ( WSL ) on Win10. Other Unix environments will probably work but have not been tested. The test data can be run on personal computer, for example 8G memeory. Some of the tools that NGSPipeDb uses, e.g. STAR and cufflinks are very memory intensive programs. Therefore we recommend the following system requirements for NGSPipeDb: We recommend that you run NGSPipeDb on a server that has at least 30GB of ram. This will allow for a single-threaded NGSPipeDb run (on mouse samples). We recommend that you have at least 128GB of ram and at least a 4-core CPU if you want to run NGSPipeDb in multi-threaded mode (which will speedup the workflow significantly). Our own servers have 256GB of ram and 32 cores. Anatomy of a NGSPipeDb project It is recommended to download NGSPipeDb source and change its name to your project name (For example: mv NGSPipeDb mouse_transcriptome_analysis ), it may looks like the following structure (command: tree -d -L 2 mouse_transcriptome_analysis ): mouse_transcriptome_analysis \u251c\u2500\u2500 README.md \u251c\u2500\u2500 ngsdb \u2502 \u251c\u2500\u2500 blastplus \u2502 \u251c\u2500\u2500 db.sqlite3 \u2502 \u251c\u2500\u2500 geneAnno \u2502 \u251c\u2500\u2500 geneExpAtlas \u2502 \u251c\u2500\u2500 home \u2502 \u251c\u2500\u2500 igv \u2502 \u251c\u2500\u2500 manage.py \u2502 \u2514\u2500\u2500 ngsdb \u251c\u2500\u2500 ngspipe \u2502 \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 db_generate.Snakefile.py \u2502 \u251c\u2500\u2500 envs \u2502 \u251c\u2500\u2500 imgs \u2502 \u251c\u2500\u2500 notebooks \u2502 \u251c\u2500\u2500 reports \u2502 \u251c\u2500\u2500 rnaseq_analysis.Snakefile.py \u2502 \u251c\u2500\u2500 rules \u2502 \u2514\u2500\u2500 scripts \u251c\u2500\u2500 results \u2502 \u251c\u2500\u2500 report \u2502 \u251c\u2500\u2500 resultdata \u2502 \u2514\u2500\u2500 sqlite3 \u2514\u2500\u2500 testdata The workflow code goes into a subfolder ngspipe , while the configuration is stored in a subfolder config . Inside of the workflow subfolder, the central Snakefile marks the entrypoint of the workflow. In addition to the central Snakefile, rules are stored in a modular way, using the optional subfolder ngspipe/rules . Further, scripts are stored in a subfolder workflow/scripts and notebooks in a subfolder workflow/notebooks . Conda environments are stored in a subfolder workflow/envs . Finally, report caption files are stored in workflow/report . The database code goes into a subfolder ngsdb , while the manage.py is ngsdb's command-line utility for administrative tasks. A golabl setting file is stored under ngsdb/ngsdb , such as ngsdb/ngsdb/setting.py and ngsdb/ngsdb/urls.py . Many ngsdb function module take a app name. For example, if your INSTALLED_APPS in ngsdb/ngsdb/setting.py contains the string 'igv', the database will contain a page of IGV genome browser. All output files generated in the workflow should be stored under results/result , unless they are rather retrieved report, in which case they should be stored under results/report . The latter subfolder results/sqlite3 contains Sqlite3 kind file that shall be used by ngsdb. Basics: An example execution of RNA-seq analysis with test data Advance: An example execution of RNA-seq analysis with custome data Reproducibility conda\u73af\u5883\u514b\u9686conda create -n ngspipedb_py38_conda_env \u2013clone ./ngspipedb_py38_conda_env/ use conda env export cd NGSPipeDB_source_code # export to yaml conda env export --no-builds -p ./ngspipedb_py38_conda_env >ngspipedb_py38_conda_env.yaml use conda pack \u7528\u2013use-conda\u8fd9\u4e2a\u53c2\u6570\u7684\u8bdd\uff0c\u56e0\u4e3a\u6240\u6709\u8f6f\u4ef6\u7684\u73af\u5883\u90fd\u662f\u5355\u72ec\u7684\uff0c\u6240\u6709conda\u5b89\u88c5\u7684\u65f6\u5019\u4e0d\u4f1a\u51fa\u9519\uff0c\u90a3\u4e48\u5982\u679c\u5df2\u7ecf\u4e0b\u8f7d\u5b89\u88c5\u597d\u4e86\u73af\u5883\uff0c\u7528\u8fd9\u79cd\u65b9\u5f0f\u5982\u4f55\u4f7f\u7528\uff1f\u9ed8\u8ba4\u7684\u73af\u5883\u662f.snakemake\u6587\u4ef6\u5939\u4e0b\uff0c\u5982\u4f55\u6307\u5b9a\uff1f \u7528\u4e0a\u9762\u7684\u65b9\u5f0f\u597d\u5b89\u88c5\uff0c\u4e0d\u4f1a\u51fa\u9519\uff0c\u4f46\u662f\u4f1a\u5bfc\u81f4\u6587\u4ef6\u5f88\u5927\uff0c\u591a\u5927\uff1f \u662f\u5426\u80fd\u628a\u4e00\u73af\u5883\u5206\u6210\u4e24\u90e8\u5206\uff1f\u4e00\u90e8\u5206\u8f6f\u4ef6\u96c6\u5408\u8d77\u6765\u53d8\u6210\u4e00\u4e2a\u5927\u73af\u5883\uff0c\u53e6\u4e00\u90e8\u5206\u8f6f\u4ef6\u5c31\u7528\u2013use-conda\u73af\u5883\u5355\u72ec\u6307\u5b9a\uff0c\u4f46\u662f\u8fd9\u4e24\u79cd\u65b9\u5f0f\u80fd\u7ed3\u5408\u5230\u4e00\u8d77\u7528\u5417\uff1f # pack cd NGSPipeDB_source_code mamba install -c conda-forge conda-pack conda pack -p ./ngspipedb_py38_conda_env -o ngspipedb_py38_conda_env_osx64.tar.gz # unpack on another machine mkdir -p ngspipedb_py38_conda_env tar -xzf ngspipedb_py38_conda_env_osx64.tar.gz -C ngspipedb_py38_conda_env source activate ./ngspipedb_py38_conda_env conda-unpack conda config \u2013add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config \u2013add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ conda config \u2013add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ conda config \u2013add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/ activate base and set miniconda path conda init Conda Prompt Customization conda config \u2013set env_prompt '({name}) ' source ~/.bashrc update conda, (optional) conda update conda create conda visual environment, python version, snakemake version, env directory,django version conda create -p ngspipedb_py38_conda_env python=3.8 activate conda env conda activate ./ngspipedb_py38_conda_env install mamba to make install software faster. conda install mamba -c conda-forge update some bioinformatics tools we will use bellow. mamba env update \u2013prefix ./ngspipedb_py38_conda_env/ \u2013file requirement.yaml \u2013prune you can exit virtual environment by conda deactivate https://wooey.readthedocs.io/en/latest/install.html \u2013conda-frontend mamba \u9009\u62e9\u66f4\u5feb\u4e00\u70b9\u7684mamba \u2013conda-create-envs-only \u53ea\u521b\u5efa\u73af\u5883\uff0c\u7136\u540e\u9000\u51fa\uff0c\u4e0d\u8fd0\u884c\u7a0b\u5e8f\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528\u6765\u4e13\u95e8\u6d4b\u8bd5\u73af\u5883 mac\u4e0a\u7684conda\u73af\u5883\u597d\u50cf\u6ca1\u6709linux\u4e0a\u9762\u90a3\u4e48\u597d\u7528\uff0c\u7279\u522b\u662fanaconda\u521b\u5efa\u7684\u73af\u5883 \u2013conda-prefix \u6307\u5b9aconda\u73af\u5883\u5b89\u88c5\u5730\u5740 \u6e05\u7406conda\u5b89\u88c5\u5305\u548c\u7f13\u5b58 snakemake -s ngspipe/db_generate.Snakefile.py \u2013use-conda \u2013conda-prefix condaEnvSplit -p -j1 Simplest is just abandon the \u2013use-conda flag, as suggested in the answer. Alternatively, you could make a container that has the env pre-created and configured, then use \u2013use-singularity. Or, if the post-installation can be automated, one could build a custom Conda package that runs some post-linking scripts. Sorry I seem to have missed your comment! snakemake \u5982\u4f55\u8fd0\u884c\u5355\u4e2a\u7a0b\u5e8f\uff1f\u8fd9\u4e2a\u4e5f\u5f88\u6709\u7528 \u57fa\u56e0\u7684\u547d\u4ee4\uff0c\u50cfdkango\u8fd9\u6837\u7684\u547d\u4ee4\u5728\u5f88\u591arules\u4e2d\u90fd\u6709\uff0c\u6240\u6709\u6bd4\u5982\u6709\u4e2a\u9876\u5c42\u7684\u73af\u5883\u4e2d\u5b89\u88c5\u4e86django Troubleshooting Ngsdb.yaml+wooey Python=3.8 samtools clustergrammer Pip install wooey pip install pandas==0.25.3 Contributing Please submit an issue to report bugs or ask questions. Please contribute bug fixes or new features with a pull request to this repository. If this does not help, please feel free to consult: * Xuan Zhang ( zhangxuan@xtbg.ac.cn ) or","title":"NGSPipeDb - NGS pipeline and database"},{"location":"NGSPipeDb/#ngspipedb-ngs-pipeline-and-database","text":"Author: Dr. Xuan Zhang Last update: 2021-01-20 Citation: NGSPipeDb: An automated pipeline for parallel processing of huge NGS data and database generation. Table of Contents: Introduction to NGSPipeDb System requirements Anatomy of a NGSPipeDb project Basics: An example execution of RNA-seq analysis with test data Advance: An example execution of RNA-seq analysis with custome data Reproducibility Troubleshooting","title":"NGSPipeDb - NGS pipeline and database"},{"location":"NGSPipeDb/#introduction-to-ngspipedb","text":"NGSPipeDb is an automated pipeline for parallel processing of huge next generation sequencing (NGS) data and database generation using snakemake workflow which allows for ease of use, optimal speed, and a highly modular code that can be further added onto and customized by experienced users. It can be further divided into NGSPipe and NGSDb for individual usage. NGSPipe consists of a Snakefile ( ngspipe/rnaseq.snakefile.py , it includes some basic rules ngspipe/rule/*.snakefile.py ), conda environment files ( ngspipe/envs/*.yaml ), a configuration file ( ngspipe/config/rnaseq.config.yaml ), a set of python , R , Shell and Perl scripts ( ngspipe/scripts/*.py ), and a set of reStructuretext reports ( reports/*.rst ). It combines the use of several dozen omic-seq tools, suites, and packages to create a complete pipeline that takes RNA-seq analysis , resequcing analysis etc. from raw sequencing data all the way through alignment, quality control, unsupervised analyses, differential expression, and downstream pathway analysis. It is implemented such that alternative or similar analysis can be added or removed. The results are compiled in a simple and highly visual report containing the key figures to explain the analysis, and then compiles all of the relevant files, tables, and pictures into an easy to navigate folder. Table file such as csv, tsv, xlsx etc. It is based on snakemake and includes the following tools: * shovill (based on Spades) * QUAST v.5 (including BUSCO) * mash * fastp It will read untrimmed raw data from your illumina sequencing experiments as paired .fastq.gz-files. These are then trimmed, assembled and polished. Besides generating ready-for-use contigs, AQUAMIS will select the closest reference genome from NCBI RefSeq and produce an intuitive, detailed report on your data and assemblies to evaluate its reliability for further analyses. It relies on reference-based and reference-free measures such as coverage depth, gene content, genome completeness and contamination, assembly length and many more. Based on the experience from thousands of sequencing experiments, threshold sets for different species have been defined to detect potentially poor results. In addition, NGSDb has been outfitted with several recently published tools that allow for visualize and data share.can be convert to Sqlite3 format. The Django project and apps can be orgined by user defined. It is easy to share your data with a web inteface. a set of apps (such as home , igv , geneExpAtlas , efp brwose ). By default, the NGSPipeDb performs all the steps shown in the diagram below. However, advanced user, you can easily modify the Snakefile and the config.yaml and/or add \"custom rules\" to enable additional functions. Currently, transcript quantification with Salmon at the read-level or gene quantification by featureCounts can be activated. The first version handles RNA-Seq workflow. Workflows available: - RNA-seq - ChIP-seq - Resequencing TODO : NGSPipe miRNA scRNA-seq ATAC-seq NGSdb efp browser","title":"Introduction to NGSPipeDb "},{"location":"NGSPipeDb/#system-requirements","text":"Building NGSPipeDb and running the examples require Linux, MacOS or Windows Subsystem for Linux ( WSL ) on Win10. Other Unix environments will probably work but have not been tested. The test data can be run on personal computer, for example 8G memeory. Some of the tools that NGSPipeDb uses, e.g. STAR and cufflinks are very memory intensive programs. Therefore we recommend the following system requirements for NGSPipeDb: We recommend that you run NGSPipeDb on a server that has at least 30GB of ram. This will allow for a single-threaded NGSPipeDb run (on mouse samples). We recommend that you have at least 128GB of ram and at least a 4-core CPU if you want to run NGSPipeDb in multi-threaded mode (which will speedup the workflow significantly). Our own servers have 256GB of ram and 32 cores.","title":"System requirements "},{"location":"NGSPipeDb/#anatomy-of-a-ngspipedb-project","text":"It is recommended to download NGSPipeDb source and change its name to your project name (For example: mv NGSPipeDb mouse_transcriptome_analysis ), it may looks like the following structure (command: tree -d -L 2 mouse_transcriptome_analysis ): mouse_transcriptome_analysis \u251c\u2500\u2500 README.md \u251c\u2500\u2500 ngsdb \u2502 \u251c\u2500\u2500 blastplus \u2502 \u251c\u2500\u2500 db.sqlite3 \u2502 \u251c\u2500\u2500 geneAnno \u2502 \u251c\u2500\u2500 geneExpAtlas \u2502 \u251c\u2500\u2500 home \u2502 \u251c\u2500\u2500 igv \u2502 \u251c\u2500\u2500 manage.py \u2502 \u2514\u2500\u2500 ngsdb \u251c\u2500\u2500 ngspipe \u2502 \u251c\u2500\u2500 config \u2502 \u251c\u2500\u2500 db_generate.Snakefile.py \u2502 \u251c\u2500\u2500 envs \u2502 \u251c\u2500\u2500 imgs \u2502 \u251c\u2500\u2500 notebooks \u2502 \u251c\u2500\u2500 reports \u2502 \u251c\u2500\u2500 rnaseq_analysis.Snakefile.py \u2502 \u251c\u2500\u2500 rules \u2502 \u2514\u2500\u2500 scripts \u251c\u2500\u2500 results \u2502 \u251c\u2500\u2500 report \u2502 \u251c\u2500\u2500 resultdata \u2502 \u2514\u2500\u2500 sqlite3 \u2514\u2500\u2500 testdata The workflow code goes into a subfolder ngspipe , while the configuration is stored in a subfolder config . Inside of the workflow subfolder, the central Snakefile marks the entrypoint of the workflow. In addition to the central Snakefile, rules are stored in a modular way, using the optional subfolder ngspipe/rules . Further, scripts are stored in a subfolder workflow/scripts and notebooks in a subfolder workflow/notebooks . Conda environments are stored in a subfolder workflow/envs . Finally, report caption files are stored in workflow/report . The database code goes into a subfolder ngsdb , while the manage.py is ngsdb's command-line utility for administrative tasks. A golabl setting file is stored under ngsdb/ngsdb , such as ngsdb/ngsdb/setting.py and ngsdb/ngsdb/urls.py . Many ngsdb function module take a app name. For example, if your INSTALLED_APPS in ngsdb/ngsdb/setting.py contains the string 'igv', the database will contain a page of IGV genome browser. All output files generated in the workflow should be stored under results/result , unless they are rather retrieved report, in which case they should be stored under results/report . The latter subfolder results/sqlite3 contains Sqlite3 kind file that shall be used by ngsdb.","title":"Anatomy of a NGSPipeDb project "},{"location":"NGSPipeDb/#basics-an-example-execution-of-rna-seq-analysis-with-test-data","text":"","title":"Basics: An example execution of RNA-seq analysis with test data"},{"location":"NGSPipeDb/#advance-an-example-execution-of-rna-seq-analysis-with-custome-data","text":"","title":"Advance: An example execution of RNA-seq analysis with custome data"},{"location":"NGSPipeDb/#reproducibility","text":"conda\u73af\u5883\u514b\u9686conda create -n ngspipedb_py38_conda_env \u2013clone ./ngspipedb_py38_conda_env/ use conda env export cd NGSPipeDB_source_code # export to yaml conda env export --no-builds -p ./ngspipedb_py38_conda_env >ngspipedb_py38_conda_env.yaml use conda pack \u7528\u2013use-conda\u8fd9\u4e2a\u53c2\u6570\u7684\u8bdd\uff0c\u56e0\u4e3a\u6240\u6709\u8f6f\u4ef6\u7684\u73af\u5883\u90fd\u662f\u5355\u72ec\u7684\uff0c\u6240\u6709conda\u5b89\u88c5\u7684\u65f6\u5019\u4e0d\u4f1a\u51fa\u9519\uff0c\u90a3\u4e48\u5982\u679c\u5df2\u7ecf\u4e0b\u8f7d\u5b89\u88c5\u597d\u4e86\u73af\u5883\uff0c\u7528\u8fd9\u79cd\u65b9\u5f0f\u5982\u4f55\u4f7f\u7528\uff1f\u9ed8\u8ba4\u7684\u73af\u5883\u662f.snakemake\u6587\u4ef6\u5939\u4e0b\uff0c\u5982\u4f55\u6307\u5b9a\uff1f \u7528\u4e0a\u9762\u7684\u65b9\u5f0f\u597d\u5b89\u88c5\uff0c\u4e0d\u4f1a\u51fa\u9519\uff0c\u4f46\u662f\u4f1a\u5bfc\u81f4\u6587\u4ef6\u5f88\u5927\uff0c\u591a\u5927\uff1f \u662f\u5426\u80fd\u628a\u4e00\u73af\u5883\u5206\u6210\u4e24\u90e8\u5206\uff1f\u4e00\u90e8\u5206\u8f6f\u4ef6\u96c6\u5408\u8d77\u6765\u53d8\u6210\u4e00\u4e2a\u5927\u73af\u5883\uff0c\u53e6\u4e00\u90e8\u5206\u8f6f\u4ef6\u5c31\u7528\u2013use-conda\u73af\u5883\u5355\u72ec\u6307\u5b9a\uff0c\u4f46\u662f\u8fd9\u4e24\u79cd\u65b9\u5f0f\u80fd\u7ed3\u5408\u5230\u4e00\u8d77\u7528\u5417\uff1f # pack cd NGSPipeDB_source_code mamba install -c conda-forge conda-pack conda pack -p ./ngspipedb_py38_conda_env -o ngspipedb_py38_conda_env_osx64.tar.gz # unpack on another machine mkdir -p ngspipedb_py38_conda_env tar -xzf ngspipedb_py38_conda_env_osx64.tar.gz -C ngspipedb_py38_conda_env source activate ./ngspipedb_py38_conda_env conda-unpack conda config \u2013add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config \u2013add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ conda config \u2013add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ conda config \u2013add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/ activate base and set miniconda path conda init Conda Prompt Customization conda config \u2013set env_prompt '({name}) ' source ~/.bashrc update conda, (optional) conda update conda create conda visual environment, python version, snakemake version, env directory,django version conda create -p ngspipedb_py38_conda_env python=3.8 activate conda env conda activate ./ngspipedb_py38_conda_env install mamba to make install software faster. conda install mamba -c conda-forge update some bioinformatics tools we will use bellow. mamba env update \u2013prefix ./ngspipedb_py38_conda_env/ \u2013file requirement.yaml \u2013prune you can exit virtual environment by conda deactivate https://wooey.readthedocs.io/en/latest/install.html \u2013conda-frontend mamba \u9009\u62e9\u66f4\u5feb\u4e00\u70b9\u7684mamba \u2013conda-create-envs-only \u53ea\u521b\u5efa\u73af\u5883\uff0c\u7136\u540e\u9000\u51fa\uff0c\u4e0d\u8fd0\u884c\u7a0b\u5e8f\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7528\u6765\u4e13\u95e8\u6d4b\u8bd5\u73af\u5883 mac\u4e0a\u7684conda\u73af\u5883\u597d\u50cf\u6ca1\u6709linux\u4e0a\u9762\u90a3\u4e48\u597d\u7528\uff0c\u7279\u522b\u662fanaconda\u521b\u5efa\u7684\u73af\u5883 \u2013conda-prefix \u6307\u5b9aconda\u73af\u5883\u5b89\u88c5\u5730\u5740 \u6e05\u7406conda\u5b89\u88c5\u5305\u548c\u7f13\u5b58 snakemake -s ngspipe/db_generate.Snakefile.py \u2013use-conda \u2013conda-prefix condaEnvSplit -p -j1 Simplest is just abandon the \u2013use-conda flag, as suggested in the answer. Alternatively, you could make a container that has the env pre-created and configured, then use \u2013use-singularity. Or, if the post-installation can be automated, one could build a custom Conda package that runs some post-linking scripts. Sorry I seem to have missed your comment! snakemake \u5982\u4f55\u8fd0\u884c\u5355\u4e2a\u7a0b\u5e8f\uff1f\u8fd9\u4e2a\u4e5f\u5f88\u6709\u7528 \u57fa\u56e0\u7684\u547d\u4ee4\uff0c\u50cfdkango\u8fd9\u6837\u7684\u547d\u4ee4\u5728\u5f88\u591arules\u4e2d\u90fd\u6709\uff0c\u6240\u6709\u6bd4\u5982\u6709\u4e2a\u9876\u5c42\u7684\u73af\u5883\u4e2d\u5b89\u88c5\u4e86django","title":"Reproducibility "},{"location":"NGSPipeDb/#troubleshooting","text":"Ngsdb.yaml+wooey Python=3.8 samtools clustergrammer Pip install wooey pip install pandas==0.25.3","title":"Troubleshooting "},{"location":"NGSPipeDb/#contributing","text":"Please submit an issue to report bugs or ask questions. Please contribute bug fixes or new features with a pull request to this repository. If this does not help, please feel free to consult: * Xuan Zhang ( zhangxuan@xtbg.ac.cn ) or","title":"Contributing"},{"location":"Reference-based-NGSPipe-RNA-seq/","text":"Reference-base RNA-seq basic analysis Info If this is your first time using NGSPipe, then we strongly recommend that you start by running test data. If you already have experience with NGSPipe, we suggest you can go straight to the custom data section. Reference genome-based - an assembled genome exists for a species for which an RNAseq experiment is performed. It allows reads to be aligned against the reference genome and significantly improves our ability to reconstruct transcripts. A basic RNA-Seq analysis is ploy(A) selected RNA-Seq. This pipeline can be used for traditional transcriptome profiling, differential expression, and GO and KEGG annotation. A typical flow of transcriptome analysis with reference is shown in the figure below RNA-Seq pipeline NGSPipeDb runpipe command line interface ngspipedb runpipe -h Usage : ngspipedb runpipe [OPTIONS] PROJECTNAME run a lot of pipeline Example : python -m ngspipedbcli runpipe ngspipe-rnaseq-basic -n ngspipe-rnaseq-basic -d test_pipeline --genomeFasta testdata_ngspipe-rnaseq-basic/genome/chr19.fa --genomeAnno testdata_ngspipe-rnaseq-basic/genome/GRCm38.83.chr19.gtf --samplefile testdata_ngspipe-rnaseq-basic/rawdata/sample.csv --conditionfile testdata_ngspipe-rnaseq-basic/rawdata/condition.csv --rawreadsdir testdata_ngspipe-rnaseq-basic/rawdata --snaketype p --report -db -ps Options : -n, --pipename [ngspipe-rnaseq-basic|ngspipe-rnaseq-lncRNA|ngspipe-rnaseq-trinity|ngspipe-chipseq|ngspipe-resequencing|ngsdb] ngspipedb env name [required] -d, --directory PATH project directory -j, --jobs INTEGER how many cpu to use --genomeFasta TEXT genome sequence file (fasta) --genomeAnno TEXT genome annotation file (gff/gtf) --samplefile TEXT samplefile --conditionfile TEXT conditionfile --rawreadsdir TEXT raw reads directory -e, --email_addr TEXT result directory name (under project directory) --reads_prefix TEXT reads prefix (Example : _R{}.fq.gz ) --resultdirname TEXT result directory name under proect name directory --snaketype [np|p] `p` : print snakemake shell commands. `np` : Enable the dry run. -r, --report generate html report -db, --database generate database -c, --configfile PATH config file path --otherparams TEXT other snakemake params -ps, --printshell print ngspipedb shell commands -h, --help Show this message and exit. RNA-Seq basic analysis on test data 1. Download test files NGSPipe is dependent on reference files and raw sequence reads which can be found in http://www.liu-lab.com/ngspipedb/testdata . To download the mouse RNA-seq test data into current directory: ngspipedb download -n ngspipe-rnaseq-basic -t testdata && tar -zxvf testdata-ngspipe-rnaseq-basic.tar.gz -n ngspipe-rnaseq-basic select pipeline name here. -t testdata select data type is testdata Make sure you have the following directory structure by command tree testdata-ngspipe-rnaseq-basic : testdata_ngspipe-rnaseq-basic \u251c\u2500\u2500 genome \u2502 \u251c\u2500\u2500 GRCm38.83.chr19.gtf \u2502 \u2514\u2500\u2500 chr19.fa \u2514\u2500\u2500 rawdata \u251c\u2500\u2500 condition.csv \u251c\u2500\u2500 control-0_R1.fq.gz \u251c\u2500\u2500 control-0_R2.fq.gz \u251c\u2500\u2500 control-1_R1.fq.gz \u251c\u2500\u2500 control-1_R2.fq.gz \u251c\u2500\u2500 control-2_R1.fq.gz \u251c\u2500\u2500 control-2_R2.fq.gz \u251c\u2500\u2500 sample.csv \u251c\u2500\u2500 treated-0_R1.fq.gz \u251c\u2500\u2500 treated-0_R2.fq.gz \u251c\u2500\u2500 treated-1_R1.fq.gz \u251c\u2500\u2500 treated-1_R2.fq.gz \u251c\u2500\u2500 treated-2_R1.fq.gz \u2514\u2500\u2500 treated-2_R2.fq.gz 2 directories, 16 files Warning The test data is only used to verify that the analytical process is working properly and the analysis results do not have a biological significance. See help message for subcommand download ngspipedb download -h Usage : ngspipedb download [OPTIONS] Commands related to get testdata and database Example : python -m ngspipedbcli downloaddata -l python -m ngspipedbcli downloaddata -n ngspipe-rnaseq-basic -t testdata -o run_test/myproject_rnaseq_basic -ps Options : -l, --list list all available files. -a, --all download all datatypes -ps, --printshell print ngspipedb shell commands -o, --directory PATH -n, --pipeline [ngspipe-rnaseq-basic|ngspipe-rnaseq-lncRNA|ngspipe-rnaseq-trinity|ngspipe-chipseq|ngspipe-resequencing|ngsdb] ngspipedb env name -p, --platform [osx|linux] A file name or file path -t, --datatype [env|testdata|database] file types -h, --help Show this message and exit. 2. Run RNA-seq analysis on test data We provied a basic reference-based RNA-seq workflow for users to take a glance of ngspipe-rnaseq-basic. This workflow contains 7 steps: 1. sampling data (choose part of your data) 2. raw reads qc 3. junction align to genome 4. transcript assembly 5. gene quantification 6. statistic 7. differential gene analysis You can do RNA-seq analysis by just one simply command: ngspipedb runpipe mouse_rnaseq_analysis -n ngspipe-rnaseq-basic --genomeFasta testdata_ngspipe-rnaseq-basic/genome/chr19.fa --genomeAnno testdata_ngspipe-rnaseq-basic/genome/GRCm38.83.chr19.gtf --samplefile testdata_ngspipe-rnaseq-basic/rawdata/sample.csv --conditionfile testdata_ngspipe-rnaseq-basic/rawdata/condition.csv --rawreadsdir testdata_ngspipe-rnaseq-basic/rawdata --report -db -ps mouse_rnaseq_analysis your project name -n ngspipe-rnaseq-basic pipeline name --genomeFasta testdata_ngspipe-rnaseq-basic/genome/chr19.fa give a genome fasta file path, see file format fasta --genomeAnno testdata_ngspipe-rnaseq-basic/genome/GRCm38.83.chr19.gtf give a genome annotaion file path gtf / gff --samplefile testdata_ngspipe-rnaseq-basic/rawdata/sample.csv give a sample file path, which has one column The final data files are put in the folder test_pipeline/ngspipe-rnaseq-basic . Please check you result file tree -d -L 2 test_pipeline/ngspipe-rnaseq-basic , it may like this: test_pipeline/ngspipe-rnaseq-basic \u251c\u2500\u2500 database \u251c\u2500\u2500 genome \u251c\u2500\u2500 rawdata \u2514\u2500\u2500 result_Sep-06-2021 \u251c\u2500\u2500 ngsdb_code \u2502 \u251c\u2500\u2500 __pycache__ \u2502 \u251c\u2500\u2500 blastplus \u2502 \u251c\u2500\u2500 geneAnno \u2502 \u251c\u2500\u2500 geneDetail \u2502 \u251c\u2500\u2500 geneExpAtlas \u2502 \u251c\u2500\u2500 home \u2502 \u251c\u2500\u2500 igv \u2502 \u251c\u2500\u2500 media \u2502 \u251c\u2500\u2500 ngsdb \u2502 \u251c\u2500\u2500 search \u2502 \u251c\u2500\u2500 tools \u2502 \u2514\u2500\u2500 wooey \u251c\u2500\u2500 ngsdb_data \u2502 \u251c\u2500\u2500 addscript \u2502 \u251c\u2500\u2500 blastdb \u2502 \u251c\u2500\u2500 exp \u2502 \u251c\u2500\u2500 gbrowse \u2502 \u251c\u2500\u2500 gff_sqlite3 \u2502 \u2514\u2500\u2500 migration \u251c\u2500\u2500 ngspipe_result \u2502 \u251c\u2500\u2500 diff \u2502 \u251c\u2500\u2500 mapping \u2502 \u251c\u2500\u2500 quantify \u2502 \u251c\u2500\u2500 rawReads_qc \u2502 \u251c\u2500\u2500 sampling_data \u2502 \u2514\u2500\u2500 statistic \u2514\u2500\u2500 report \u251c\u2500\u2500 1.pipeline \u251c\u2500\u2500 2.rawreads_stat \u251c\u2500\u2500 3.cleanreads_stat \u251c\u2500\u2500 4.mapping_stat \u2514\u2500\u2500 5.exp_stat 37 directories Note If you encounter any problem in this step, please turn to TroubleShooting for help. RNA-Seq basic analysis on custom data 1. start a project Create a directory structure and copy configfile: ngspipedb startproject custom_rnaseq_analysis -n ngspipe-rnaseq-basic Make sure you have the following directory structure by command tree custom_rnaseq_analysis : custom_rnaseq_analysis \u251c\u2500\u2500 database \u251c\u2500\u2500 genome \u251c\u2500\u2500 ngsdb_config.yaml \u251c\u2500\u2500 ngspipe_config.yaml \u2514\u2500\u2500 rawdata \u251c\u2500\u2500 condition.csv \u2514\u2500\u2500 sample.csv 3 directories, 4 files see help message for subcommand startproject: ngspipedb startproject -h Usage : ngspipedb startproject [OPTIONS] PROJECTNAME Creates a ngspipedb project directory structure for the given project name in the current directory or optionally in the given directory. Example : python -m ngspipedbcli startproject myproject_rnaseq_basic -n ngspipe- rnaseq-basic -ps Options : -n, --pipeline [ngspipe-rnaseq-basic|ngspipe-rnaseq-lncRNA|ngspipe-rnaseq-trinity|ngspipe-chipseq|ngspipe-resequencing|ngsdb] pipelines from ngspipedb -d, --directory TEXT project directory -ps, --printshell print ngspipedb shell commands -h, --help Show this message and exit. 2. modify configfile rnaseq pipeline need 'reference' and 'raw reads data' in custom_rnaseq_analysis/ngspipe_config.yaml to be right setting. #--------------------------- # rnaseq-basic #--------------------------- ## 1.reference ## genomeAnno_path : \"genome/GRCm38.83.chr19.gtf\" # gene annotation file, can be gtf or gff format genomeFasta_path : \"genome/chr19.fa\" # genome sequence, fasta format ## 2.raw reads data ## sample_path : \"rawdata/sample.csv\" # sample file rawreads_dir : \"rawdata\" # sample file directory read1Suffix : \"_R1.fq.gz\" # fastq suffix, read1 read2Suffix : \"_R2.fq.gz\" ## 3.condition for differential expression by deseq2 ## condition_path : \"rawdata/condition.csv\" ## 4.output directory ## results_name : \"results\" ## 5.notice ## # if the string is 'nobody', ngspipe will not send email # modify 'noboby' to 'xxx@qq.com' or 'xxx@qq.com,yyy@qq.com' to send email Warning You cannot mix Paired-end and Single-end samples within the same NGSPipe run as this will cause an ERROR. NGSPipe only support Paired-end samples. Note The input, output file paths are relative to the working directory (currently, working directory is custom_rnaseq_analysis ). If you have used -d parameter, for example, -d run_pipeline_rnaseq_basic is given, working directory will be run_pipeline_rnaseq_basic/custom_rnaseq_analysis . Or you can just use absolute path (start from root / ). 3. modify samplefile And give appropriate content to custom_rnaseq_analysis/rawdata/sample.csv and custom_rnaseq_analysis/rawdata/condition.csv one line in sample.csv without anything else. Use testdata as an example, 6 samples exists, than it will looks like this: control-0 control-1 control-2 treated-0 treated-1 treated-2 4. modify conditionfile Three columns in condition.csv with dot split. Users can't change the header sample_id,Sample,Tissue . Please put column 3 empty. sample_id,Sample,Tissue control-0,control, control-1,control, control-2,control, treated-0,treated, treated-1,treated, treated-2,treated,","title":"Reference-based RNA-seq"},{"location":"Reference-based-NGSPipe-RNA-seq/#reference-base-rna-seq-basic-analysis","text":"Info If this is your first time using NGSPipe, then we strongly recommend that you start by running test data. If you already have experience with NGSPipe, we suggest you can go straight to the custom data section. Reference genome-based - an assembled genome exists for a species for which an RNAseq experiment is performed. It allows reads to be aligned against the reference genome and significantly improves our ability to reconstruct transcripts. A basic RNA-Seq analysis is ploy(A) selected RNA-Seq. This pipeline can be used for traditional transcriptome profiling, differential expression, and GO and KEGG annotation. A typical flow of transcriptome analysis with reference is shown in the figure below RNA-Seq pipeline","title":"Reference-base RNA-seq basic analysis"},{"location":"Reference-based-NGSPipe-RNA-seq/#ngspipedb-runpipe-command-line-interface","text":"ngspipedb runpipe -h Usage : ngspipedb runpipe [OPTIONS] PROJECTNAME run a lot of pipeline Example : python -m ngspipedbcli runpipe ngspipe-rnaseq-basic -n ngspipe-rnaseq-basic -d test_pipeline --genomeFasta testdata_ngspipe-rnaseq-basic/genome/chr19.fa --genomeAnno testdata_ngspipe-rnaseq-basic/genome/GRCm38.83.chr19.gtf --samplefile testdata_ngspipe-rnaseq-basic/rawdata/sample.csv --conditionfile testdata_ngspipe-rnaseq-basic/rawdata/condition.csv --rawreadsdir testdata_ngspipe-rnaseq-basic/rawdata --snaketype p --report -db -ps Options : -n, --pipename [ngspipe-rnaseq-basic|ngspipe-rnaseq-lncRNA|ngspipe-rnaseq-trinity|ngspipe-chipseq|ngspipe-resequencing|ngsdb] ngspipedb env name [required] -d, --directory PATH project directory -j, --jobs INTEGER how many cpu to use --genomeFasta TEXT genome sequence file (fasta) --genomeAnno TEXT genome annotation file (gff/gtf) --samplefile TEXT samplefile --conditionfile TEXT conditionfile --rawreadsdir TEXT raw reads directory -e, --email_addr TEXT result directory name (under project directory) --reads_prefix TEXT reads prefix (Example : _R{}.fq.gz ) --resultdirname TEXT result directory name under proect name directory --snaketype [np|p] `p` : print snakemake shell commands. `np` : Enable the dry run. -r, --report generate html report -db, --database generate database -c, --configfile PATH config file path --otherparams TEXT other snakemake params -ps, --printshell print ngspipedb shell commands -h, --help Show this message and exit.","title":"NGSPipeDb runpipe command line interface"},{"location":"Reference-based-NGSPipe-RNA-seq/#rna-seq-basic-analysis-on-test-data","text":"","title":"RNA-Seq basic analysis on test data "},{"location":"Reference-based-NGSPipe-RNA-seq/#1-download-test-files","text":"NGSPipe is dependent on reference files and raw sequence reads which can be found in http://www.liu-lab.com/ngspipedb/testdata . To download the mouse RNA-seq test data into current directory: ngspipedb download -n ngspipe-rnaseq-basic -t testdata && tar -zxvf testdata-ngspipe-rnaseq-basic.tar.gz -n ngspipe-rnaseq-basic select pipeline name here. -t testdata select data type is testdata Make sure you have the following directory structure by command tree testdata-ngspipe-rnaseq-basic : testdata_ngspipe-rnaseq-basic \u251c\u2500\u2500 genome \u2502 \u251c\u2500\u2500 GRCm38.83.chr19.gtf \u2502 \u2514\u2500\u2500 chr19.fa \u2514\u2500\u2500 rawdata \u251c\u2500\u2500 condition.csv \u251c\u2500\u2500 control-0_R1.fq.gz \u251c\u2500\u2500 control-0_R2.fq.gz \u251c\u2500\u2500 control-1_R1.fq.gz \u251c\u2500\u2500 control-1_R2.fq.gz \u251c\u2500\u2500 control-2_R1.fq.gz \u251c\u2500\u2500 control-2_R2.fq.gz \u251c\u2500\u2500 sample.csv \u251c\u2500\u2500 treated-0_R1.fq.gz \u251c\u2500\u2500 treated-0_R2.fq.gz \u251c\u2500\u2500 treated-1_R1.fq.gz \u251c\u2500\u2500 treated-1_R2.fq.gz \u251c\u2500\u2500 treated-2_R1.fq.gz \u2514\u2500\u2500 treated-2_R2.fq.gz 2 directories, 16 files Warning The test data is only used to verify that the analytical process is working properly and the analysis results do not have a biological significance. See help message for subcommand download ngspipedb download -h Usage : ngspipedb download [OPTIONS] Commands related to get testdata and database Example : python -m ngspipedbcli downloaddata -l python -m ngspipedbcli downloaddata -n ngspipe-rnaseq-basic -t testdata -o run_test/myproject_rnaseq_basic -ps Options : -l, --list list all available files. -a, --all download all datatypes -ps, --printshell print ngspipedb shell commands -o, --directory PATH -n, --pipeline [ngspipe-rnaseq-basic|ngspipe-rnaseq-lncRNA|ngspipe-rnaseq-trinity|ngspipe-chipseq|ngspipe-resequencing|ngsdb] ngspipedb env name -p, --platform [osx|linux] A file name or file path -t, --datatype [env|testdata|database] file types -h, --help Show this message and exit.","title":"1. Download test files "},{"location":"Reference-based-NGSPipe-RNA-seq/#2-run-rna-seq-analysis-on-test-data","text":"We provied a basic reference-based RNA-seq workflow for users to take a glance of ngspipe-rnaseq-basic. This workflow contains 7 steps: 1. sampling data (choose part of your data) 2. raw reads qc 3. junction align to genome 4. transcript assembly 5. gene quantification 6. statistic 7. differential gene analysis You can do RNA-seq analysis by just one simply command: ngspipedb runpipe mouse_rnaseq_analysis -n ngspipe-rnaseq-basic --genomeFasta testdata_ngspipe-rnaseq-basic/genome/chr19.fa --genomeAnno testdata_ngspipe-rnaseq-basic/genome/GRCm38.83.chr19.gtf --samplefile testdata_ngspipe-rnaseq-basic/rawdata/sample.csv --conditionfile testdata_ngspipe-rnaseq-basic/rawdata/condition.csv --rawreadsdir testdata_ngspipe-rnaseq-basic/rawdata --report -db -ps mouse_rnaseq_analysis your project name -n ngspipe-rnaseq-basic pipeline name --genomeFasta testdata_ngspipe-rnaseq-basic/genome/chr19.fa give a genome fasta file path, see file format fasta --genomeAnno testdata_ngspipe-rnaseq-basic/genome/GRCm38.83.chr19.gtf give a genome annotaion file path gtf / gff --samplefile testdata_ngspipe-rnaseq-basic/rawdata/sample.csv give a sample file path, which has one column The final data files are put in the folder test_pipeline/ngspipe-rnaseq-basic . Please check you result file tree -d -L 2 test_pipeline/ngspipe-rnaseq-basic , it may like this: test_pipeline/ngspipe-rnaseq-basic \u251c\u2500\u2500 database \u251c\u2500\u2500 genome \u251c\u2500\u2500 rawdata \u2514\u2500\u2500 result_Sep-06-2021 \u251c\u2500\u2500 ngsdb_code \u2502 \u251c\u2500\u2500 __pycache__ \u2502 \u251c\u2500\u2500 blastplus \u2502 \u251c\u2500\u2500 geneAnno \u2502 \u251c\u2500\u2500 geneDetail \u2502 \u251c\u2500\u2500 geneExpAtlas \u2502 \u251c\u2500\u2500 home \u2502 \u251c\u2500\u2500 igv \u2502 \u251c\u2500\u2500 media \u2502 \u251c\u2500\u2500 ngsdb \u2502 \u251c\u2500\u2500 search \u2502 \u251c\u2500\u2500 tools \u2502 \u2514\u2500\u2500 wooey \u251c\u2500\u2500 ngsdb_data \u2502 \u251c\u2500\u2500 addscript \u2502 \u251c\u2500\u2500 blastdb \u2502 \u251c\u2500\u2500 exp \u2502 \u251c\u2500\u2500 gbrowse \u2502 \u251c\u2500\u2500 gff_sqlite3 \u2502 \u2514\u2500\u2500 migration \u251c\u2500\u2500 ngspipe_result \u2502 \u251c\u2500\u2500 diff \u2502 \u251c\u2500\u2500 mapping \u2502 \u251c\u2500\u2500 quantify \u2502 \u251c\u2500\u2500 rawReads_qc \u2502 \u251c\u2500\u2500 sampling_data \u2502 \u2514\u2500\u2500 statistic \u2514\u2500\u2500 report \u251c\u2500\u2500 1.pipeline \u251c\u2500\u2500 2.rawreads_stat \u251c\u2500\u2500 3.cleanreads_stat \u251c\u2500\u2500 4.mapping_stat \u2514\u2500\u2500 5.exp_stat 37 directories Note If you encounter any problem in this step, please turn to TroubleShooting for help.","title":"2. Run RNA-seq analysis on test data "},{"location":"Reference-based-NGSPipe-RNA-seq/#rna-seq-basic-analysis-on-custom-data","text":"","title":"RNA-Seq basic analysis on custom data "},{"location":"Reference-based-NGSPipe-RNA-seq/#1-start-a-project","text":"Create a directory structure and copy configfile: ngspipedb startproject custom_rnaseq_analysis -n ngspipe-rnaseq-basic Make sure you have the following directory structure by command tree custom_rnaseq_analysis : custom_rnaseq_analysis \u251c\u2500\u2500 database \u251c\u2500\u2500 genome \u251c\u2500\u2500 ngsdb_config.yaml \u251c\u2500\u2500 ngspipe_config.yaml \u2514\u2500\u2500 rawdata \u251c\u2500\u2500 condition.csv \u2514\u2500\u2500 sample.csv 3 directories, 4 files see help message for subcommand startproject: ngspipedb startproject -h Usage : ngspipedb startproject [OPTIONS] PROJECTNAME Creates a ngspipedb project directory structure for the given project name in the current directory or optionally in the given directory. Example : python -m ngspipedbcli startproject myproject_rnaseq_basic -n ngspipe- rnaseq-basic -ps Options : -n, --pipeline [ngspipe-rnaseq-basic|ngspipe-rnaseq-lncRNA|ngspipe-rnaseq-trinity|ngspipe-chipseq|ngspipe-resequencing|ngsdb] pipelines from ngspipedb -d, --directory TEXT project directory -ps, --printshell print ngspipedb shell commands -h, --help Show this message and exit.","title":"1. start a project"},{"location":"Reference-based-NGSPipe-RNA-seq/#2-modify-configfile","text":"rnaseq pipeline need 'reference' and 'raw reads data' in custom_rnaseq_analysis/ngspipe_config.yaml to be right setting. #--------------------------- # rnaseq-basic #--------------------------- ## 1.reference ## genomeAnno_path : \"genome/GRCm38.83.chr19.gtf\" # gene annotation file, can be gtf or gff format genomeFasta_path : \"genome/chr19.fa\" # genome sequence, fasta format ## 2.raw reads data ## sample_path : \"rawdata/sample.csv\" # sample file rawreads_dir : \"rawdata\" # sample file directory read1Suffix : \"_R1.fq.gz\" # fastq suffix, read1 read2Suffix : \"_R2.fq.gz\" ## 3.condition for differential expression by deseq2 ## condition_path : \"rawdata/condition.csv\" ## 4.output directory ## results_name : \"results\" ## 5.notice ## # if the string is 'nobody', ngspipe will not send email # modify 'noboby' to 'xxx@qq.com' or 'xxx@qq.com,yyy@qq.com' to send email Warning You cannot mix Paired-end and Single-end samples within the same NGSPipe run as this will cause an ERROR. NGSPipe only support Paired-end samples. Note The input, output file paths are relative to the working directory (currently, working directory is custom_rnaseq_analysis ). If you have used -d parameter, for example, -d run_pipeline_rnaseq_basic is given, working directory will be run_pipeline_rnaseq_basic/custom_rnaseq_analysis . Or you can just use absolute path (start from root / ).","title":"2. modify configfile"},{"location":"Reference-based-NGSPipe-RNA-seq/#3-modify-samplefile","text":"And give appropriate content to custom_rnaseq_analysis/rawdata/sample.csv and custom_rnaseq_analysis/rawdata/condition.csv one line in sample.csv without anything else. Use testdata as an example, 6 samples exists, than it will looks like this: control-0 control-1 control-2 treated-0 treated-1 treated-2","title":"3. modify samplefile"},{"location":"Reference-based-NGSPipe-RNA-seq/#4-modify-conditionfile","text":"Three columns in condition.csv with dot split. Users can't change the header sample_id,Sample,Tissue . Please put column 3 empty. sample_id,Sample,Tissue control-0,control, control-1,control, control-2,control, treated-0,treated, treated-1,treated, treated-2,treated,","title":"4. modify conditionfile"},{"location":"Reference-based-NGSPipe-lncRNA-analysis/","text":"Reference-base lncRNA analysis Info If this is your first time using NGSPipe, then we strongly recommend that you start by running test data. If you already have experience with NGSPipe, we suggest you can go straight to the custom data section. Reference genome-based - an assembled genome exists for a species for which an RNAseq experiment is performed. It allows reads to be aligned against the reference genome and significantly improves our ability to reconstruct transcripts. A basic RNA-Seq analysis is ploy(A) selected RNA-Seq. This pipeline can be used for traditional transcriptome profiling, differential expression, and GO and KEGG annotation. A typical flow of transcriptome analysis with reference is shown in the figure below RNA-Seq pipeline NGSPipeDb runpipe command line interface ngspipedb runpipe -h Usage : ngspipedb runpipe [OPTIONS] PROJECTNAME run a lot of pipeline Example : python -m ngspipedbcli runpipe ngspipe-rnaseq-basic -n ngspipe-rnaseq-basic -d test_pipeline --genomeFasta testdata_ngspipe-rnaseq-basic/genome/chr19.fa --genomeAnno testdata_ngspipe-rnaseq-basic/genome/GRCm38.83.chr19.gtf --samplefile testdata_ngspipe-rnaseq-basic/rawdata/sample.csv --conditionfile testdata_ngspipe-rnaseq-basic/rawdata/condition.csv --rawreadsdir testdata_ngspipe-rnaseq-basic/rawdata --snaketype p --report -db -ps Options : -n, --pipename [ngspipe-rnaseq-basic|ngspipe-rnaseq-lncRNA|ngspipe-rnaseq-trinity|ngspipe-chipseq|ngspipe-resequencing|ngsdb] ngspipedb env name [required] -d, --directory PATH project directory -j, --jobs INTEGER how many cpu to use --genomeFasta TEXT genome sequence file (fasta) --genomeAnno TEXT genome annotation file (gff/gtf) --samplefile TEXT samplefile --conditionfile TEXT conditionfile --rawreadsdir TEXT raw reads directory -e, --email_addr TEXT result directory name (under project directory) --reads_prefix TEXT reads prefix (Example : _R{}.fq.gz ) --resultdirname TEXT result directory name under proect name directory --snaketype [np|p] `p` : print snakemake shell commands. `np` : Enable the dry run. -r, --report generate html report -db, --database generate database -c, --configfile PATH config file path --otherparams TEXT other snakemake params -ps, --printshell print ngspipedb shell commands -h, --help Show this message and exit. RNA-Seq basic analysis on test data 1. Download test files NGSPipe is dependent on reference files and raw sequence reads which can be found in http://www.liu-lab.com/ngspipedb/testdata . To download the mouse RNA-seq test data into current directory: ngspipedb download -n ngspipe-rnaseq-basic -t testdata && tar -zxvf testdata-ngspipe-rnaseq-basic.tar.gz -n ngspipe-rnaseq-basic select pipeline name here. -t testdata select data type is testdata Make sure you have the following directory structure by command tree testdata-ngspipe-rnaseq-basic : testdata_ngspipe-rnaseq-basic \u251c\u2500\u2500 genome \u2502 \u251c\u2500\u2500 GRCm38.83.chr19.gtf \u2502 \u2514\u2500\u2500 chr19.fa \u2514\u2500\u2500 rawdata \u251c\u2500\u2500 condition.csv \u251c\u2500\u2500 control-0_R1.fq.gz \u251c\u2500\u2500 control-0_R2.fq.gz \u251c\u2500\u2500 control-1_R1.fq.gz \u251c\u2500\u2500 control-1_R2.fq.gz \u251c\u2500\u2500 control-2_R1.fq.gz \u251c\u2500\u2500 control-2_R2.fq.gz \u251c\u2500\u2500 sample.csv \u251c\u2500\u2500 treated-0_R1.fq.gz \u251c\u2500\u2500 treated-0_R2.fq.gz \u251c\u2500\u2500 treated-1_R1.fq.gz \u251c\u2500\u2500 treated-1_R2.fq.gz \u251c\u2500\u2500 treated-2_R1.fq.gz \u2514\u2500\u2500 treated-2_R2.fq.gz 2 directories, 16 files Warning The test data is only used to verify that the analytical process is working properly and the analysis results do not have a biological significance. See help message for subcommand download ngspipedb download -h Usage : ngspipedb download [OPTIONS] Commands related to get testdata and database Example : python -m ngspipedbcli downloaddata -l python -m ngspipedbcli downloaddata -n ngspipe-rnaseq-basic -t testdata -o run_test/myproject_rnaseq_basic -ps Options : -l, --list list all available files. -a, --all download all datatypes -ps, --printshell print ngspipedb shell commands -o, --directory PATH -n, --pipeline [ngspipe-rnaseq-basic|ngspipe-rnaseq-lncRNA|ngspipe-rnaseq-trinity|ngspipe-chipseq|ngspipe-resequencing|ngsdb] ngspipedb env name -p, --platform [osx|linux] A file name or file path -t, --datatype [env|testdata|database] file types -h, --help Show this message and exit. 2. Run lncRNA analysis on test data We provied a basic reference-based RNA-seq workflow for users to take a glance of ngspipe-rnaseq-basic. This workflow contains 7 steps: 1. sampling data (choose part of your data) 2. raw reads qc 3. junction align to genome 4. transcript assembly 5. lncRNA identification 6. gene quantification 7. statistic 8. differential gene analysis You can do RNA-seq analysis by just one simply command: python -m ngspipedbcli runpipe ngspipe-rnaseq-lncRNA -d ../test_pipeline -n ngspipe-rnaseq-lncRNA --resultdirname result_Sep-18-2021 --genomeFasta ../testdata_ngspipe-rnaseq-basic/genome/chr19.fa --genomeAnno ../testdata_ngspipe-rnaseq-basic/genome/GRCm38.83.chr19.gtf --samplefile ../testdata_ngspipe-rnaseq-basic/rawdata/sample.csv --conditionfile ../testdata_ngspipe-rnaseq-basic/rawdata/condition.csv --rawreadsdir ../testdata_ngspipe-rnaseq-basic/rawdata --snaketype p ngspipe-rnaseq-lncRNA your project name -n ngspipe-rnaseq-lncRNA pipeline name --genomeFasta testdata_ngspipe-rnaseq-basic/genome/chr19.fa give a genome fasta file path, see file format fasta --genomeAnno testdata_ngspipe-rnaseq-basic/genome/GRCm38.83.chr19.gtf give a genome annotaion file path gtf / gff --samplefile testdata_ngspipe-rnaseq-basic/rawdata/sample.csv give a sample file path, which has one column The final data files are put in the folder test_pipeline/ngspipe-rnaseq-lncRNA . Please check you result file tree -d -L 2 test_pipeline/ngspipe-rnaseq-lncRNA , it may like this: todo xx directories Note If you encounter any problem in this step, please turn to TroubleShooting for help. RNA-Seq basic analysis on custom data 1. start a project Create a directory structure and copy configfile: ngspipedb startproject custom_rnaseq_analysis -n ngspipe-rnaseq-lncRNA Make sure you have the following directory structure by command tree custom_rnaseq_analysis : custom_rnaseq_analysis \u251c\u2500\u2500 database \u251c\u2500\u2500 genome \u251c\u2500\u2500 ngsdb_config.yaml \u251c\u2500\u2500 ngspipe_config.yaml \u2514\u2500\u2500 rawdata \u251c\u2500\u2500 condition.csv \u2514\u2500\u2500 sample.csv 3 directories, 4 files see help message for subcommand startproject: ngspipedb startproject -h Usage : ngspipedb startproject [OPTIONS] PROJECTNAME Creates a ngspipedb project directory structure for the given project name in the current directory or optionally in the given directory. Example : python -m ngspipedbcli startproject myproject_rnaseq_basic -n ngspipe- rnaseq-basic -ps Options : -n, --pipeline [ngspipe-rnaseq-basic|ngspipe-rnaseq-lncRNA|ngspipe-rnaseq-trinity|ngspipe-chipseq|ngspipe-resequencing|ngsdb] pipelines from ngspipedb -d, --directory TEXT project directory -ps, --printshell print ngspipedb shell commands -h, --help Show this message and exit. 2. modify configfile rnaseq pipeline need 'reference' and 'raw reads data' in custom_rnaseq_analysis/ngspipe_config.yaml to be right setting. #--------------------------- # rnaseq-lncRNA #--------------------------- ## 1.reference ## genomeAnno_path : \"genome/GRCm38.83.chr19.gtf\" # gene annotation file, can be gtf or gff format genomeFasta_path : \"genome/chr19.fa\" # genome sequence, fasta format ## 2.raw reads data ## sample_path : \"rawdata/sample.csv\" # sample file rawreads_dir : \"rawdata\" # sample file directory read1Suffix : \"_R1.fq.gz\" # fastq suffix, read1 read2Suffix : \"_R2.fq.gz\" ## 3.condition for differential expression by deseq2 ## condition_path : \"rawdata/condition.csv\" ## 4.output directory ## results_name : \"results\" ## 5.notice ## # if the string is 'nobody', ngspipe will not send email # modify 'noboby' to 'xxx@qq.com' or 'xxx@qq.com,yyy@qq.com' to send email Warning You cannot mix Paired-end and Single-end samples within the same NGSPipe run as this will cause an ERROR. NGSPipe only support Paired-end samples. Note The input, output file paths are relative to the working directory (currently, working directory is custom_rnaseq_analysis ). If you have used -d parameter, for example, -d run_pipeline_rnaseq_lncRNA is given, working directory will be run_pipeline_rnaseq_lncRNA/custom_rnaseq_analysis . Or you can just use absolute path (start from root / ). 3. modify samplefile And give appropriate content to custom_rnaseq_analysis/rawdata/sample.csv and custom_rnaseq_analysis/rawdata/condition.csv one line in sample.csv without anything else. Use testdata as an example, 6 samples exists, than it will looks like this: control-0 control-1 control-2 treated-0 treated-1 treated-2 4. modify conditionfile Three columns in condition.csv with dot split. Users can't change the header sample_id,Sample,Tissue . Please put column 3 empty. sample_id,Sample,Tissue control-0,control, control-1,control, control-2,control, treated-0,treated, treated-1,treated, treated-2,treated, 5. run ngspipedb","title":"Reference-based lncRNA"},{"location":"Reference-based-NGSPipe-lncRNA-analysis/#reference-base-lncrna-analysis","text":"Info If this is your first time using NGSPipe, then we strongly recommend that you start by running test data. If you already have experience with NGSPipe, we suggest you can go straight to the custom data section. Reference genome-based - an assembled genome exists for a species for which an RNAseq experiment is performed. It allows reads to be aligned against the reference genome and significantly improves our ability to reconstruct transcripts. A basic RNA-Seq analysis is ploy(A) selected RNA-Seq. This pipeline can be used for traditional transcriptome profiling, differential expression, and GO and KEGG annotation. A typical flow of transcriptome analysis with reference is shown in the figure below RNA-Seq pipeline","title":"Reference-base lncRNA analysis"},{"location":"Reference-based-NGSPipe-lncRNA-analysis/#ngspipedb-runpipe-command-line-interface","text":"ngspipedb runpipe -h Usage : ngspipedb runpipe [OPTIONS] PROJECTNAME run a lot of pipeline Example : python -m ngspipedbcli runpipe ngspipe-rnaseq-basic -n ngspipe-rnaseq-basic -d test_pipeline --genomeFasta testdata_ngspipe-rnaseq-basic/genome/chr19.fa --genomeAnno testdata_ngspipe-rnaseq-basic/genome/GRCm38.83.chr19.gtf --samplefile testdata_ngspipe-rnaseq-basic/rawdata/sample.csv --conditionfile testdata_ngspipe-rnaseq-basic/rawdata/condition.csv --rawreadsdir testdata_ngspipe-rnaseq-basic/rawdata --snaketype p --report -db -ps Options : -n, --pipename [ngspipe-rnaseq-basic|ngspipe-rnaseq-lncRNA|ngspipe-rnaseq-trinity|ngspipe-chipseq|ngspipe-resequencing|ngsdb] ngspipedb env name [required] -d, --directory PATH project directory -j, --jobs INTEGER how many cpu to use --genomeFasta TEXT genome sequence file (fasta) --genomeAnno TEXT genome annotation file (gff/gtf) --samplefile TEXT samplefile --conditionfile TEXT conditionfile --rawreadsdir TEXT raw reads directory -e, --email_addr TEXT result directory name (under project directory) --reads_prefix TEXT reads prefix (Example : _R{}.fq.gz ) --resultdirname TEXT result directory name under proect name directory --snaketype [np|p] `p` : print snakemake shell commands. `np` : Enable the dry run. -r, --report generate html report -db, --database generate database -c, --configfile PATH config file path --otherparams TEXT other snakemake params -ps, --printshell print ngspipedb shell commands -h, --help Show this message and exit.","title":"NGSPipeDb runpipe command line interface"},{"location":"Reference-based-NGSPipe-lncRNA-analysis/#rna-seq-basic-analysis-on-test-data","text":"","title":"RNA-Seq basic analysis on test data "},{"location":"Reference-based-NGSPipe-lncRNA-analysis/#1-download-test-files","text":"NGSPipe is dependent on reference files and raw sequence reads which can be found in http://www.liu-lab.com/ngspipedb/testdata . To download the mouse RNA-seq test data into current directory: ngspipedb download -n ngspipe-rnaseq-basic -t testdata && tar -zxvf testdata-ngspipe-rnaseq-basic.tar.gz -n ngspipe-rnaseq-basic select pipeline name here. -t testdata select data type is testdata Make sure you have the following directory structure by command tree testdata-ngspipe-rnaseq-basic : testdata_ngspipe-rnaseq-basic \u251c\u2500\u2500 genome \u2502 \u251c\u2500\u2500 GRCm38.83.chr19.gtf \u2502 \u2514\u2500\u2500 chr19.fa \u2514\u2500\u2500 rawdata \u251c\u2500\u2500 condition.csv \u251c\u2500\u2500 control-0_R1.fq.gz \u251c\u2500\u2500 control-0_R2.fq.gz \u251c\u2500\u2500 control-1_R1.fq.gz \u251c\u2500\u2500 control-1_R2.fq.gz \u251c\u2500\u2500 control-2_R1.fq.gz \u251c\u2500\u2500 control-2_R2.fq.gz \u251c\u2500\u2500 sample.csv \u251c\u2500\u2500 treated-0_R1.fq.gz \u251c\u2500\u2500 treated-0_R2.fq.gz \u251c\u2500\u2500 treated-1_R1.fq.gz \u251c\u2500\u2500 treated-1_R2.fq.gz \u251c\u2500\u2500 treated-2_R1.fq.gz \u2514\u2500\u2500 treated-2_R2.fq.gz 2 directories, 16 files Warning The test data is only used to verify that the analytical process is working properly and the analysis results do not have a biological significance. See help message for subcommand download ngspipedb download -h Usage : ngspipedb download [OPTIONS] Commands related to get testdata and database Example : python -m ngspipedbcli downloaddata -l python -m ngspipedbcli downloaddata -n ngspipe-rnaseq-basic -t testdata -o run_test/myproject_rnaseq_basic -ps Options : -l, --list list all available files. -a, --all download all datatypes -ps, --printshell print ngspipedb shell commands -o, --directory PATH -n, --pipeline [ngspipe-rnaseq-basic|ngspipe-rnaseq-lncRNA|ngspipe-rnaseq-trinity|ngspipe-chipseq|ngspipe-resequencing|ngsdb] ngspipedb env name -p, --platform [osx|linux] A file name or file path -t, --datatype [env|testdata|database] file types -h, --help Show this message and exit.","title":"1. Download test files "},{"location":"Reference-based-NGSPipe-lncRNA-analysis/#2-run-lncrna-analysis-on-test-data","text":"We provied a basic reference-based RNA-seq workflow for users to take a glance of ngspipe-rnaseq-basic. This workflow contains 7 steps: 1. sampling data (choose part of your data) 2. raw reads qc 3. junction align to genome 4. transcript assembly 5. lncRNA identification 6. gene quantification 7. statistic 8. differential gene analysis You can do RNA-seq analysis by just one simply command: python -m ngspipedbcli runpipe ngspipe-rnaseq-lncRNA -d ../test_pipeline -n ngspipe-rnaseq-lncRNA --resultdirname result_Sep-18-2021 --genomeFasta ../testdata_ngspipe-rnaseq-basic/genome/chr19.fa --genomeAnno ../testdata_ngspipe-rnaseq-basic/genome/GRCm38.83.chr19.gtf --samplefile ../testdata_ngspipe-rnaseq-basic/rawdata/sample.csv --conditionfile ../testdata_ngspipe-rnaseq-basic/rawdata/condition.csv --rawreadsdir ../testdata_ngspipe-rnaseq-basic/rawdata --snaketype p ngspipe-rnaseq-lncRNA your project name -n ngspipe-rnaseq-lncRNA pipeline name --genomeFasta testdata_ngspipe-rnaseq-basic/genome/chr19.fa give a genome fasta file path, see file format fasta --genomeAnno testdata_ngspipe-rnaseq-basic/genome/GRCm38.83.chr19.gtf give a genome annotaion file path gtf / gff --samplefile testdata_ngspipe-rnaseq-basic/rawdata/sample.csv give a sample file path, which has one column The final data files are put in the folder test_pipeline/ngspipe-rnaseq-lncRNA . Please check you result file tree -d -L 2 test_pipeline/ngspipe-rnaseq-lncRNA , it may like this: todo xx directories Note If you encounter any problem in this step, please turn to TroubleShooting for help.","title":"2. Run lncRNA analysis on test data "},{"location":"Reference-based-NGSPipe-lncRNA-analysis/#rna-seq-basic-analysis-on-custom-data","text":"","title":"RNA-Seq basic analysis on custom data "},{"location":"Reference-based-NGSPipe-lncRNA-analysis/#1-start-a-project","text":"Create a directory structure and copy configfile: ngspipedb startproject custom_rnaseq_analysis -n ngspipe-rnaseq-lncRNA Make sure you have the following directory structure by command tree custom_rnaseq_analysis : custom_rnaseq_analysis \u251c\u2500\u2500 database \u251c\u2500\u2500 genome \u251c\u2500\u2500 ngsdb_config.yaml \u251c\u2500\u2500 ngspipe_config.yaml \u2514\u2500\u2500 rawdata \u251c\u2500\u2500 condition.csv \u2514\u2500\u2500 sample.csv 3 directories, 4 files see help message for subcommand startproject: ngspipedb startproject -h Usage : ngspipedb startproject [OPTIONS] PROJECTNAME Creates a ngspipedb project directory structure for the given project name in the current directory or optionally in the given directory. Example : python -m ngspipedbcli startproject myproject_rnaseq_basic -n ngspipe- rnaseq-basic -ps Options : -n, --pipeline [ngspipe-rnaseq-basic|ngspipe-rnaseq-lncRNA|ngspipe-rnaseq-trinity|ngspipe-chipseq|ngspipe-resequencing|ngsdb] pipelines from ngspipedb -d, --directory TEXT project directory -ps, --printshell print ngspipedb shell commands -h, --help Show this message and exit.","title":"1. start a project"},{"location":"Reference-based-NGSPipe-lncRNA-analysis/#2-modify-configfile","text":"rnaseq pipeline need 'reference' and 'raw reads data' in custom_rnaseq_analysis/ngspipe_config.yaml to be right setting. #--------------------------- # rnaseq-lncRNA #--------------------------- ## 1.reference ## genomeAnno_path : \"genome/GRCm38.83.chr19.gtf\" # gene annotation file, can be gtf or gff format genomeFasta_path : \"genome/chr19.fa\" # genome sequence, fasta format ## 2.raw reads data ## sample_path : \"rawdata/sample.csv\" # sample file rawreads_dir : \"rawdata\" # sample file directory read1Suffix : \"_R1.fq.gz\" # fastq suffix, read1 read2Suffix : \"_R2.fq.gz\" ## 3.condition for differential expression by deseq2 ## condition_path : \"rawdata/condition.csv\" ## 4.output directory ## results_name : \"results\" ## 5.notice ## # if the string is 'nobody', ngspipe will not send email # modify 'noboby' to 'xxx@qq.com' or 'xxx@qq.com,yyy@qq.com' to send email Warning You cannot mix Paired-end and Single-end samples within the same NGSPipe run as this will cause an ERROR. NGSPipe only support Paired-end samples. Note The input, output file paths are relative to the working directory (currently, working directory is custom_rnaseq_analysis ). If you have used -d parameter, for example, -d run_pipeline_rnaseq_lncRNA is given, working directory will be run_pipeline_rnaseq_lncRNA/custom_rnaseq_analysis . Or you can just use absolute path (start from root / ).","title":"2. modify configfile"},{"location":"Reference-based-NGSPipe-lncRNA-analysis/#3-modify-samplefile","text":"And give appropriate content to custom_rnaseq_analysis/rawdata/sample.csv and custom_rnaseq_analysis/rawdata/condition.csv one line in sample.csv without anything else. Use testdata as an example, 6 samples exists, than it will looks like this: control-0 control-1 control-2 treated-0 treated-1 treated-2","title":"3. modify samplefile"},{"location":"Reference-based-NGSPipe-lncRNA-analysis/#4-modify-conditionfile","text":"Three columns in condition.csv with dot split. Users can't change the header sample_id,Sample,Tissue . Please put column 3 empty. sample_id,Sample,Tissue control-0,control, control-1,control, control-2,control, treated-0,treated, treated-1,treated, treated-2,treated,","title":"4. modify conditionfile"},{"location":"Reference-based-NGSPipe-lncRNA-analysis/#5-run","text":"ngspipedb","title":"5. run"},{"location":"Reference-free-NGSPipe-RNA-seq/","text":"title: date: 2021-03-07 09:51:19 tags: - Markdown - rnaseq categories: module identification of novel transcripts, identification of expressed, alternative splicing, and for the detection of gene fusion events. Reference-free RNA-seq analysis use NGSPipe Info If this is your first time using NGSPipe, then we strongly recommend that you start by running test data. If you already have experience with NGSPipe, we suggest you can go straight to the custom data section. Reference genome-free - no genome assembly for the species of interest is available. In this case one would need to assemble the reads into transcripts using de novo approaches. This type of RNAseq is as much of an art as well as science because assembly is heavily parameter-dependent and difficult to do well. In this lesson we will focus on the Reference genome-based type of RNA seq. A typical flow of transcriptome analysis with reference is shown in the figure below Denovo RNA-Seq pipeline NGSPipeDb runpipe command line interface ngspipedb runpipe -h Usage : ngspipedb runpipe [OPTIONS] PROJECTNAME run a lot of pipeline Example : python -m ngspipedbcli runpipe ngspipe-rnaseq-basic -n ngspipe-rnaseq-basic -d test_pipeline --genomeFasta testdata_ngspipe-rnaseq-basic/genome/chr19.fa --genomeAnno testdata_ngspipe-rnaseq-basic/genome/GRCm38.83.chr19.gtf --samplefile testdata_ngspipe-rnaseq-basic/rawdata/sample.csv --conditionfile testdata_ngspipe-rnaseq-basic/rawdata/condition.csv --rawreadsdir testdata_ngspipe-rnaseq-basic/rawdata --snaketype p --report -db -ps Options : -n, --pipename [ngspipe-rnaseq-basic|ngspipe-rnaseq-lncRNA|ngspipe-rnaseq-trinity|ngspipe-chipseq|ngspipe-resequencing|ngsdb] ngspipedb env name [required] -d, --directory PATH project directory -j, --jobs INTEGER how many cpu to use --genomeFasta TEXT genome sequence file (fasta) --genomeAnno TEXT genome annotation file (gff/gtf) --samplefile TEXT samplefile --conditionfile TEXT conditionfile --rawreadsdir TEXT raw reads directory -e, --email_addr TEXT result directory name (under project directory) --reads_prefix TEXT reads prefix (Example : _R{}.fq.gz ) --resultdirname TEXT result directory name under proect name directory --snaketype [np|p] `p` : print snakemake shell commands. `np` : Enable the dry run. -r, --report generate html report -db, --database generate database -c, --configfile PATH config file path --otherparams TEXT other snakemake params -ps, --printshell print ngspipedb shell commands -h, --help Show this message and exit. Reference-free RNA-Seq analysis on test data 1. Download test files NGSPipe is dependent on reference files and raw sequence reads which can be found in http://www.liu-lab.com/ngspipedb/testdata . To download the mouse RNA-seq test data into current directory: ngspipedb download -n ngspipe-rnaseq-basic -t testdata && tar -zxvf testdata-ngspipe-rnaseq-basic.tar.gz -n ngspipe-rnaseq-basic select pipeline name here. -t testdata select data type is testdata Make sure you have the following directory structure by command tree testdata-ngspipe-rnaseq-basic : testdata_ngspipe-rnaseq-basic \u251c\u2500\u2500 genome \u2502 \u251c\u2500\u2500 GRCm38.83.chr19.gtf \u2502 \u2514\u2500\u2500 chr19.fa \u2514\u2500\u2500 rawdata \u251c\u2500\u2500 condition.csv \u251c\u2500\u2500 control-0_R1.fq.gz \u251c\u2500\u2500 control-0_R2.fq.gz \u251c\u2500\u2500 control-1_R1.fq.gz \u251c\u2500\u2500 control-1_R2.fq.gz \u251c\u2500\u2500 control-2_R1.fq.gz \u251c\u2500\u2500 control-2_R2.fq.gz \u251c\u2500\u2500 sample.csv \u251c\u2500\u2500 treated-0_R1.fq.gz \u251c\u2500\u2500 treated-0_R2.fq.gz \u251c\u2500\u2500 treated-1_R1.fq.gz \u251c\u2500\u2500 treated-1_R2.fq.gz \u251c\u2500\u2500 treated-2_R1.fq.gz \u2514\u2500\u2500 treated-2_R2.fq.gz 2 directories, 16 files Warning The test data is only used to verify that the analytical process is working properly and the analysis results do not have a biological significance. See help message for subcommand download ngspipedb download -h Usage : ngspipedb download [OPTIONS] Commands related to get testdata and database Example : python -m ngspipedbcli downloaddata -l python -m ngspipedbcli downloaddata -n ngspipe-rnaseq-basic -t testdata -o run_test/myproject_rnaseq_basic -ps Options : -l, --list list all available files. -a, --all download all datatypes -ps, --printshell print ngspipedb shell commands -o, --directory PATH -n, --pipeline [ngspipe-rnaseq-basic|ngspipe-rnaseq-lncRNA|ngspipe-rnaseq-trinity|ngspipe-chipseq|ngspipe-resequencing|ngsdb] ngspipedb env name -p, --platform [osx|linux] A file name or file path -t, --datatype [env|testdata|database] file types -h, --help Show this message and exit. 2. Run RNA-seq analysis on test data We provied a basic reference-free RNA-seq workflow for users to take a glance of ngspipe-rnaseq-trinity. This workflow contains 7 steps: 1. sampling data (choose part of your data) 2. raw reads qc 3. junction align to genome 4. transcript assembly by trinity 5. gene quantification 6. statistic 7. differential gene analysis You can do RNA-seq analysis by just one simply command: python -m ngspipedbcli runpipe mouse_rnaseq_trinity_analysis -d ../test_pipeline -n ngspipe-rnaseq-trinity --resultdirname result_Sep-18-2021 --samplefile ../testdata_ngspipe-rnaseq-basic/rawdata/sample.csv --conditionfile ../testdata_ngspipe-rnaseq-basic/rawdata/condition.csv --rawreadsdir ../testdata_ngspipe-rnaseq-basic/rawdata --snaketype p mouse_rnaseq_trinity_analysis your project name -n ngspipe-rnaseq-trinity pipeline name --samplefile testdata_ngspipe-rnaseq-basic/rawdata/sample.csv give a sample file path, which has one column --conditionfile ../testdata_ngspipe-rnaseq-basic/rawdata/condition.csv this file is for differential expression --rawreadsdir ../testdata_ngspipe-rnaseq-basic/rawdata raw reads directory The final data files are put in the folder test_pipeline/ngspipe-rnaseq-basic . Please check you result file tree -d -L 2 test_pipeline/ngspipe-rnaseq-basic , it may like this: todo x directories Note If you encounter any problem in this step, please turn to TroubleShooting for help. RNA-Seq basic analysis on custom data 1. start a project Create a directory structure and copy configfile: ngspipedb startproject custom_rnaseq_analysis -n ngspipe-rnaseq-trinity Make sure you have the following directory structure by command tree custom_rnaseq_analysis : custom_rnaseq_analysis \u251c\u2500\u2500 database \u251c\u2500\u2500 genome \u251c\u2500\u2500 ngsdb_config.yaml \u251c\u2500\u2500 ngspipe_config.yaml \u2514\u2500\u2500 rawdata \u251c\u2500\u2500 condition.csv \u2514\u2500\u2500 sample.csv 3 directories, 4 files see help message for subcommand startproject: ngspipedb startproject -h Usage : ngspipedb startproject [OPTIONS] PROJECTNAME Creates a ngspipedb project directory structure for the given project name in the current directory or optionally in the given directory. Example : python -m ngspipedbcli startproject myproject_rnaseq_basic -n ngspipe- rnaseq-basic -ps Options : -n, --pipeline [ngspipe-rnaseq-basic|ngspipe-rnaseq-lncRNA|ngspipe-rnaseq-trinity|ngspipe-chipseq|ngspipe-resequencing|ngsdb] pipelines from ngspipedb -d, --directory TEXT project directory -ps, --printshell print ngspipedb shell commands -h, --help Show this message and exit. 2. modify configfile rnaseq pipeline need 'reference' and 'raw reads data' in custom_rnaseq_analysis/ngspipe_config.yaml to be right setting. #--------------------------- # denovo trinity ranseq #--------------------------- ## 1.raw reads data ## sample_path : \"../rawdata/sample.csv\" # sample file rawreads_dir : \"../rawdata\" # sample file directory read1Suffix : \"_R1.fq.gz\" # fastq suffix, read1 read2Suffix : \"_R2.fq.gz\" ## 2.condition for differential expression by deseq2 ## condition_path : \"../rawdata/condition.csv\" ## 3.output directory ## results_name : \"results_trinity\" ## 5.notice ## # if the string is 'nobody', ngspipe will not send email # modify 'noboby' to 'xxx@qq.com' or 'xxx@qq.com,yyy@qq.com' to send email email_addr : 'nobody' # database database_eggnog : \"../database/eggnog\" Warning You cannot mix Paired-end and Single-end samples within the same NGSPipe run as this will cause an ERROR. NGSPipe only support Paired-end samples. Note The input, output file paths are relative to the working directory (currently, working directory is custom_rnaseq_analysis ). If you have used -d parameter, for example, -d run_pipeline_rnaseq_trinity is given, working directory will be run_pipeline_rnaseq_trinity/custom_rnaseq_analysis . Or you can just use absolute path (start from root / ). 3. modify samplefile And give appropriate content to custom_rnaseq_analysis/rawdata/sample.csv and custom_rnaseq_analysis/rawdata/condition.csv one line in sample.csv without anything else. Use testdata as an example, 6 samples exists, than it will looks like this: control-0 control-1 control-2 treated-0 treated-1 treated-2 4. modify conditionfile Three columns in condition.csv with dot split. Users can't change the header sample_id,Sample,Tissue . Please put column 3 empty. sample_id,Sample,Tissue control-0,control, control-1,control, control-2,control, treated-0,treated, treated-1,treated, treated-2,treated, 5. run ngspipedb","title":"Denovo RNA-seq"},{"location":"Reference-free-NGSPipe-RNA-seq/#reference-free-rna-seq-analysis-use-ngspipe","text":"","title":"Reference-free RNA-seq analysis use NGSPipe"},{"location":"Reference-free-NGSPipe-RNA-seq/#_1","text":"Info If this is your first time using NGSPipe, then we strongly recommend that you start by running test data. If you already have experience with NGSPipe, we suggest you can go straight to the custom data section. Reference genome-free - no genome assembly for the species of interest is available. In this case one would need to assemble the reads into transcripts using de novo approaches. This type of RNAseq is as much of an art as well as science because assembly is heavily parameter-dependent and difficult to do well. In this lesson we will focus on the Reference genome-based type of RNA seq. A typical flow of transcriptome analysis with reference is shown in the figure below Denovo RNA-Seq pipeline","title":""},{"location":"Reference-free-NGSPipe-RNA-seq/#ngspipedb-runpipe-command-line-interface","text":"ngspipedb runpipe -h Usage : ngspipedb runpipe [OPTIONS] PROJECTNAME run a lot of pipeline Example : python -m ngspipedbcli runpipe ngspipe-rnaseq-basic -n ngspipe-rnaseq-basic -d test_pipeline --genomeFasta testdata_ngspipe-rnaseq-basic/genome/chr19.fa --genomeAnno testdata_ngspipe-rnaseq-basic/genome/GRCm38.83.chr19.gtf --samplefile testdata_ngspipe-rnaseq-basic/rawdata/sample.csv --conditionfile testdata_ngspipe-rnaseq-basic/rawdata/condition.csv --rawreadsdir testdata_ngspipe-rnaseq-basic/rawdata --snaketype p --report -db -ps Options : -n, --pipename [ngspipe-rnaseq-basic|ngspipe-rnaseq-lncRNA|ngspipe-rnaseq-trinity|ngspipe-chipseq|ngspipe-resequencing|ngsdb] ngspipedb env name [required] -d, --directory PATH project directory -j, --jobs INTEGER how many cpu to use --genomeFasta TEXT genome sequence file (fasta) --genomeAnno TEXT genome annotation file (gff/gtf) --samplefile TEXT samplefile --conditionfile TEXT conditionfile --rawreadsdir TEXT raw reads directory -e, --email_addr TEXT result directory name (under project directory) --reads_prefix TEXT reads prefix (Example : _R{}.fq.gz ) --resultdirname TEXT result directory name under proect name directory --snaketype [np|p] `p` : print snakemake shell commands. `np` : Enable the dry run. -r, --report generate html report -db, --database generate database -c, --configfile PATH config file path --otherparams TEXT other snakemake params -ps, --printshell print ngspipedb shell commands -h, --help Show this message and exit.","title":"NGSPipeDb runpipe command line interface"},{"location":"Reference-free-NGSPipe-RNA-seq/#reference-free-rna-seq-analysis-on-test-data","text":"","title":"Reference-free RNA-Seq analysis on test data "},{"location":"Reference-free-NGSPipe-RNA-seq/#1-download-test-files","text":"NGSPipe is dependent on reference files and raw sequence reads which can be found in http://www.liu-lab.com/ngspipedb/testdata . To download the mouse RNA-seq test data into current directory: ngspipedb download -n ngspipe-rnaseq-basic -t testdata && tar -zxvf testdata-ngspipe-rnaseq-basic.tar.gz -n ngspipe-rnaseq-basic select pipeline name here. -t testdata select data type is testdata Make sure you have the following directory structure by command tree testdata-ngspipe-rnaseq-basic : testdata_ngspipe-rnaseq-basic \u251c\u2500\u2500 genome \u2502 \u251c\u2500\u2500 GRCm38.83.chr19.gtf \u2502 \u2514\u2500\u2500 chr19.fa \u2514\u2500\u2500 rawdata \u251c\u2500\u2500 condition.csv \u251c\u2500\u2500 control-0_R1.fq.gz \u251c\u2500\u2500 control-0_R2.fq.gz \u251c\u2500\u2500 control-1_R1.fq.gz \u251c\u2500\u2500 control-1_R2.fq.gz \u251c\u2500\u2500 control-2_R1.fq.gz \u251c\u2500\u2500 control-2_R2.fq.gz \u251c\u2500\u2500 sample.csv \u251c\u2500\u2500 treated-0_R1.fq.gz \u251c\u2500\u2500 treated-0_R2.fq.gz \u251c\u2500\u2500 treated-1_R1.fq.gz \u251c\u2500\u2500 treated-1_R2.fq.gz \u251c\u2500\u2500 treated-2_R1.fq.gz \u2514\u2500\u2500 treated-2_R2.fq.gz 2 directories, 16 files Warning The test data is only used to verify that the analytical process is working properly and the analysis results do not have a biological significance. See help message for subcommand download ngspipedb download -h Usage : ngspipedb download [OPTIONS] Commands related to get testdata and database Example : python -m ngspipedbcli downloaddata -l python -m ngspipedbcli downloaddata -n ngspipe-rnaseq-basic -t testdata -o run_test/myproject_rnaseq_basic -ps Options : -l, --list list all available files. -a, --all download all datatypes -ps, --printshell print ngspipedb shell commands -o, --directory PATH -n, --pipeline [ngspipe-rnaseq-basic|ngspipe-rnaseq-lncRNA|ngspipe-rnaseq-trinity|ngspipe-chipseq|ngspipe-resequencing|ngsdb] ngspipedb env name -p, --platform [osx|linux] A file name or file path -t, --datatype [env|testdata|database] file types -h, --help Show this message and exit.","title":"1. Download test files "},{"location":"Reference-free-NGSPipe-RNA-seq/#2-run-rna-seq-analysis-on-test-data","text":"We provied a basic reference-free RNA-seq workflow for users to take a glance of ngspipe-rnaseq-trinity. This workflow contains 7 steps: 1. sampling data (choose part of your data) 2. raw reads qc 3. junction align to genome 4. transcript assembly by trinity 5. gene quantification 6. statistic 7. differential gene analysis You can do RNA-seq analysis by just one simply command: python -m ngspipedbcli runpipe mouse_rnaseq_trinity_analysis -d ../test_pipeline -n ngspipe-rnaseq-trinity --resultdirname result_Sep-18-2021 --samplefile ../testdata_ngspipe-rnaseq-basic/rawdata/sample.csv --conditionfile ../testdata_ngspipe-rnaseq-basic/rawdata/condition.csv --rawreadsdir ../testdata_ngspipe-rnaseq-basic/rawdata --snaketype p mouse_rnaseq_trinity_analysis your project name -n ngspipe-rnaseq-trinity pipeline name --samplefile testdata_ngspipe-rnaseq-basic/rawdata/sample.csv give a sample file path, which has one column --conditionfile ../testdata_ngspipe-rnaseq-basic/rawdata/condition.csv this file is for differential expression --rawreadsdir ../testdata_ngspipe-rnaseq-basic/rawdata raw reads directory The final data files are put in the folder test_pipeline/ngspipe-rnaseq-basic . Please check you result file tree -d -L 2 test_pipeline/ngspipe-rnaseq-basic , it may like this: todo x directories Note If you encounter any problem in this step, please turn to TroubleShooting for help.","title":"2. Run RNA-seq analysis on test data "},{"location":"Reference-free-NGSPipe-RNA-seq/#rna-seq-basic-analysis-on-custom-data","text":"","title":"RNA-Seq basic analysis on custom data "},{"location":"Reference-free-NGSPipe-RNA-seq/#1-start-a-project","text":"Create a directory structure and copy configfile: ngspipedb startproject custom_rnaseq_analysis -n ngspipe-rnaseq-trinity Make sure you have the following directory structure by command tree custom_rnaseq_analysis : custom_rnaseq_analysis \u251c\u2500\u2500 database \u251c\u2500\u2500 genome \u251c\u2500\u2500 ngsdb_config.yaml \u251c\u2500\u2500 ngspipe_config.yaml \u2514\u2500\u2500 rawdata \u251c\u2500\u2500 condition.csv \u2514\u2500\u2500 sample.csv 3 directories, 4 files see help message for subcommand startproject: ngspipedb startproject -h Usage : ngspipedb startproject [OPTIONS] PROJECTNAME Creates a ngspipedb project directory structure for the given project name in the current directory or optionally in the given directory. Example : python -m ngspipedbcli startproject myproject_rnaseq_basic -n ngspipe- rnaseq-basic -ps Options : -n, --pipeline [ngspipe-rnaseq-basic|ngspipe-rnaseq-lncRNA|ngspipe-rnaseq-trinity|ngspipe-chipseq|ngspipe-resequencing|ngsdb] pipelines from ngspipedb -d, --directory TEXT project directory -ps, --printshell print ngspipedb shell commands -h, --help Show this message and exit.","title":"1. start a project"},{"location":"Reference-free-NGSPipe-RNA-seq/#2-modify-configfile","text":"rnaseq pipeline need 'reference' and 'raw reads data' in custom_rnaseq_analysis/ngspipe_config.yaml to be right setting. #--------------------------- # denovo trinity ranseq #--------------------------- ## 1.raw reads data ## sample_path : \"../rawdata/sample.csv\" # sample file rawreads_dir : \"../rawdata\" # sample file directory read1Suffix : \"_R1.fq.gz\" # fastq suffix, read1 read2Suffix : \"_R2.fq.gz\" ## 2.condition for differential expression by deseq2 ## condition_path : \"../rawdata/condition.csv\" ## 3.output directory ## results_name : \"results_trinity\" ## 5.notice ## # if the string is 'nobody', ngspipe will not send email # modify 'noboby' to 'xxx@qq.com' or 'xxx@qq.com,yyy@qq.com' to send email email_addr : 'nobody' # database database_eggnog : \"../database/eggnog\" Warning You cannot mix Paired-end and Single-end samples within the same NGSPipe run as this will cause an ERROR. NGSPipe only support Paired-end samples. Note The input, output file paths are relative to the working directory (currently, working directory is custom_rnaseq_analysis ). If you have used -d parameter, for example, -d run_pipeline_rnaseq_trinity is given, working directory will be run_pipeline_rnaseq_trinity/custom_rnaseq_analysis . Or you can just use absolute path (start from root / ).","title":"2. modify configfile"},{"location":"Reference-free-NGSPipe-RNA-seq/#3-modify-samplefile","text":"And give appropriate content to custom_rnaseq_analysis/rawdata/sample.csv and custom_rnaseq_analysis/rawdata/condition.csv one line in sample.csv without anything else. Use testdata as an example, 6 samples exists, than it will looks like this: control-0 control-1 control-2 treated-0 treated-1 treated-2","title":"3. modify samplefile"},{"location":"Reference-free-NGSPipe-RNA-seq/#4-modify-conditionfile","text":"Three columns in condition.csv with dot split. Users can't change the header sample_id,Sample,Tissue . Please put column 3 empty. sample_id,Sample,Tissue control-0,control, control-1,control, control-2,control, treated-0,treated, treated-1,treated, treated-2,treated,","title":"4. modify conditionfile"},{"location":"Reference-free-NGSPipe-RNA-seq/#5-run","text":"ngspipedb","title":"5. run"},{"location":"changelog/","text":"Change logs [0.0.21] - 2021-20-27 check version in command line add a pipeline for medicago tnt insertion [0.0.17] - 2021-10-1 update file rnaseq.config.yaml [0.0.17] - 2021-10-1 rewrite rnaseq pipeline with more optional parameters [0.0.15] - 2021-9-18 add go,kegg annotion to rnaseq-basic analysis add pipeline denove rna-seq analysis add pipeline rnaseq lncRNA analysis","title":"Change logs"},{"location":"changelog/#change-logs","text":"","title":"Change logs"},{"location":"changelog/#0021-2021-20-27","text":"check version in command line add a pipeline for medicago tnt insertion","title":"[0.0.21] - 2021-20-27"},{"location":"changelog/#0017-2021-10-1","text":"update file rnaseq.config.yaml","title":"[0.0.17] - 2021-10-1"},{"location":"changelog/#0017-2021-10-1_1","text":"rewrite rnaseq pipeline with more optional parameters","title":"[0.0.17] - 2021-10-1"},{"location":"changelog/#0015-2021-9-18","text":"add go,kegg annotion to rnaseq-basic analysis add pipeline denove rna-seq analysis add pipeline rnaseq lncRNA analysis","title":"[0.0.15] - 2021-9-18"},{"location":"conda/","text":"conda usage download pre-build ngspipe-ranseq env ngspipd-rnaseq-Linux-x86-64 ngspipd-rnaseq-MacOSX-x86-64","title":"conda usage"},{"location":"conda/#conda-usage","text":"","title":"conda usage"},{"location":"conda/#download-pre-build-ngspipe-ranseq-env","text":"ngspipd-rnaseq-Linux-x86-64 ngspipd-rnaseq-MacOSX-x86-64","title":"download pre-build ngspipe-ranseq env "},{"location":"download_sra/","text":"conda create -n sradownload conda activate sradownload mamba install sra-tools=2.10.1 -c bioconda mamba install -y -c hcc aspera-cli=3.9.1","title":"Download sra"},{"location":"ngs/","text":"NGS analysis Table of Contents: RNASeq ChipSeq RNA-Seq analysis Chip-Seq analysis","title":"NGS analysis"},{"location":"ngs/#ngs-analysis","text":"Table of Contents: RNASeq ChipSeq","title":"NGS analysis"},{"location":"ngs/#rna-seq-analysis","text":"","title":"RNA-Seq analysis "},{"location":"ngs/#chip-seq-analysis","text":"","title":"Chip-Seq analysis "},{"location":"todo/","text":"todo conda package ngsdb tools page","title":"Todo"},{"location":"todo/#todo","text":"conda package ngsdb tools page","title":"todo"},{"location":"trouble_shooting/","text":"trouble_shooting can't find libtbb salmon need libtbb, fix error by sudo apt install libtbb on Ubuntu or sudo yum install libtbb* on CentOS.","title":"trouble shooting"},{"location":"trouble_shooting/#trouble_shooting","text":"","title":"trouble_shooting"},{"location":"trouble_shooting/#cant-find-libtbb","text":"salmon need libtbb, fix error by sudo apt install libtbb on Ubuntu or sudo yum install libtbb* on CentOS.","title":"can't find libtbb"}]}